
Smart_Home_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  000010da  0000116e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800208  00800208  00001316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000254c  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a33  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001683  00000000  00000000  0000444b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00005ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ced  00000000  00000000  0000625a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	51 03       	mulsu	r21, r17
      56:	97 03       	fmuls	r17, r23
      58:	b5 03       	fmuls	r19, r21
      5a:	d3 03       	fmuls	r21, r19
      5c:	f1 03       	fmuls	r23, r17
      5e:	50 05       	cpc	r21, r0
      60:	8e 06       	cpc	r8, r30
      62:	15 07       	cpc	r17, r21
      64:	80 06       	cpc	r8, r16
      66:	80 06       	cpc	r8, r16
      68:	80 06       	cpc	r8, r16
      6a:	80 06       	cpc	r8, r16
      6c:	80 06       	cpc	r8, r16
      6e:	80 06       	cpc	r8, r16
      70:	80 06       	cpc	r8, r16
      72:	80 06       	cpc	r8, r16
      74:	80 06       	cpc	r8, r16
      76:	80 06       	cpc	r8, r16
      78:	80 06       	cpc	r8, r16
      7a:	80 06       	cpc	r8, r16
      7c:	80 06       	cpc	r8, r16
      7e:	80 06       	cpc	r8, r16
      80:	80 06       	cpc	r8, r16
      82:	80 06       	cpc	r8, r16
      84:	80 06       	cpc	r8, r16
      86:	80 06       	cpc	r8, r16
      88:	80 06       	cpc	r8, r16
      8a:	80 06       	cpc	r8, r16
      8c:	80 06       	cpc	r8, r16
      8e:	80 06       	cpc	r8, r16
      90:	80 06       	cpc	r8, r16
      92:	80 06       	cpc	r8, r16
      94:	80 06       	cpc	r8, r16
      96:	80 06       	cpc	r8, r16
      98:	80 06       	cpc	r8, r16
      9a:	80 06       	cpc	r8, r16
      9c:	80 06       	cpc	r8, r16
      9e:	80 06       	cpc	r8, r16
      a0:	80 06       	cpc	r8, r16
      a2:	80 06       	cpc	r8, r16
      a4:	80 06       	cpc	r8, r16
      a6:	80 06       	cpc	r8, r16
      a8:	80 06       	cpc	r8, r16
      aa:	80 06       	cpc	r8, r16
      ac:	80 06       	cpc	r8, r16
      ae:	80 06       	cpc	r8, r16
      b0:	80 06       	cpc	r8, r16
      b2:	80 06       	cpc	r8, r16
      b4:	80 06       	cpc	r8, r16
      b6:	80 06       	cpc	r8, r16
      b8:	80 06       	cpc	r8, r16
      ba:	80 06       	cpc	r8, r16
      bc:	80 06       	cpc	r8, r16
      be:	80 06       	cpc	r8, r16
      c0:	80 06       	cpc	r8, r16
      c2:	80 06       	cpc	r8, r16
      c4:	80 06       	cpc	r8, r16
      c6:	60 05       	cpc	r22, r0
      c8:	81 05       	cpc	r24, r1
      ca:	a2 05       	cpc	r26, r2
      cc:	c3 05       	cpc	r28, r3
      ce:	12 06       	cpc	r1, r18
      d0:	41 06       	cpc	r4, r17
      d2:	70 06       	cpc	r7, r16

000000d4 <__ctors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf e5       	ldi	r28, 0x5F	; 95
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
      e0:	12 e0       	ldi	r17, 0x02	; 2
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	ea ed       	ldi	r30, 0xDA	; 218
      e8:	f0 e1       	ldi	r31, 0x10	; 16
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
      ec:	05 90       	lpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a8 30       	cpi	r26, 0x08	; 8
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a8 e0       	ldi	r26, 0x08	; 8
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	af 31       	cpi	r26, 0x1F	; 31
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
     10a:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <EEPROM_read>:
 */ 

#include "EEPROM_interface.h"

uint8_t EEPROM_read(uint16_t Copy_add){
	while(GETBIT(EECR,EEWE)==1){};
     112:	e1 99       	sbic	0x1c, 1	; 28
     114:	fe cf       	rjmp	.-4      	; 0x112 <EEPROM_read>
	EEAR =Copy_add;
     116:	9f bb       	out	0x1f, r25	; 31
     118:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR,EERE);
     11a:	8c b3       	in	r24, 0x1c	; 28
     11c:	81 60       	ori	r24, 0x01	; 1
     11e:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
     120:	8d b3       	in	r24, 0x1d	; 29
}
     122:	08 95       	ret

00000124 <EEPROM_write>:
void EEPROM_write(uint16_t Copy_add , uint8_t Copy_data){
	while(GETBIT(EECR,EEWE)==1){};
     124:	e1 99       	sbic	0x1c, 1	; 28
     126:	fe cf       	rjmp	.-4      	; 0x124 <EEPROM_write>
	EEAR =Copy_add;
     128:	9f bb       	out	0x1f, r25	; 31
     12a:	8e bb       	out	0x1e, r24	; 30
	EEDR =Copy_add;
     12c:	8d bb       	out	0x1d, r24	; 29
	SETBIT(EECR,EEMWE);
     12e:	8c b3       	in	r24, 0x1c	; 28
     130:	84 60       	ori	r24, 0x04	; 4
     132:	8c bb       	out	0x1c, r24	; 28
	SETBIT(EECR,EEWE);
     134:	8c b3       	in	r24, 0x1c	; 28
     136:	82 60       	ori	r24, 0x02	; 2
     138:	8c bb       	out	0x1c, r24	; 28
     13a:	08 95       	ret

0000013c <KPD_init>:
	'1','2','3','N',
	'N','0','N','N'
};

void KPD_init(){
CLRBIT(DDRD,2);
     13c:	81 b3       	in	r24, 0x11	; 17
     13e:	8b 7f       	andi	r24, 0xFB	; 251
     140:	81 bb       	out	0x11, r24	; 17
CLRBIT(DDRD,3);
     142:	81 b3       	in	r24, 0x11	; 17
     144:	87 7f       	andi	r24, 0xF7	; 247
     146:	81 bb       	out	0x11, r24	; 17
CLRBIT(DDRD,4);
     148:	81 b3       	in	r24, 0x11	; 17
     14a:	8f 7e       	andi	r24, 0xEF	; 239
     14c:	81 bb       	out	0x11, r24	; 17
CLRBIT(DDRD,5);
     14e:	81 b3       	in	r24, 0x11	; 17
     150:	8f 7d       	andi	r24, 0xDF	; 223
     152:	81 bb       	out	0x11, r24	; 17
PORTD |= 0b00111100; // internal pull up in case of protues
     154:	82 b3       	in	r24, 0x12	; 18
     156:	8c 63       	ori	r24, 0x3C	; 60
     158:	82 bb       	out	0x12, r24	; 18
SETBIT(DDRB,0);
     15a:	87 b3       	in	r24, 0x17	; 23
     15c:	81 60       	ori	r24, 0x01	; 1
     15e:	87 bb       	out	0x17, r24	; 23
SETBIT(DDRB,1);
     160:	87 b3       	in	r24, 0x17	; 23
     162:	82 60       	ori	r24, 0x02	; 2
     164:	87 bb       	out	0x17, r24	; 23
SETBIT(DDRB,2);
     166:	87 b3       	in	r24, 0x17	; 23
     168:	84 60       	ori	r24, 0x04	; 4
     16a:	87 bb       	out	0x17, r24	; 23
SETBIT(DDRB,3);
     16c:	87 b3       	in	r24, 0x17	; 23
     16e:	88 60       	ori	r24, 0x08	; 8
     170:	87 bb       	out	0x17, r24	; 23
     172:	08 95       	ret

00000174 <KPD_read>:
}

int8_t KPD_read(){

	for(uint8_t i = 0; i < 4 ; i++){
     174:	e0 e0       	ldi	r30, 0x00	; 0
     176:	4a c0       	rjmp	.+148    	; 0x20c <KPD_read+0x98>
		PORTB = PORTB & 0b11110000;
     178:	88 b3       	in	r24, 0x18	; 24
     17a:	80 7f       	andi	r24, 0xF0	; 240
     17c:	88 bb       	out	0x18, r24	; 24
		if (i == 0) PORTB |= 0b00001110;
     17e:	e1 11       	cpse	r30, r1
     180:	03 c0       	rjmp	.+6      	; 0x188 <KPD_read+0x14>
     182:	88 b3       	in	r24, 0x18	; 24
     184:	8e 60       	ori	r24, 0x0E	; 14
     186:	88 bb       	out	0x18, r24	; 24
		if (i == 1) PORTB |= 0b00001101;
     188:	e1 30       	cpi	r30, 0x01	; 1
     18a:	19 f4       	brne	.+6      	; 0x192 <KPD_read+0x1e>
     18c:	88 b3       	in	r24, 0x18	; 24
     18e:	8d 60       	ori	r24, 0x0D	; 13
     190:	88 bb       	out	0x18, r24	; 24
		if (i == 2) PORTB |= 0b00001011;
     192:	e2 30       	cpi	r30, 0x02	; 2
     194:	19 f4       	brne	.+6      	; 0x19c <KPD_read+0x28>
     196:	88 b3       	in	r24, 0x18	; 24
     198:	8b 60       	ori	r24, 0x0B	; 11
     19a:	88 bb       	out	0x18, r24	; 24
		if (i == 3) PORTB |= 0b00000111;
     19c:	e3 30       	cpi	r30, 0x03	; 3
     19e:	19 f4       	brne	.+6      	; 0x1a6 <KPD_read+0x32>
     1a0:	88 b3       	in	r24, 0x18	; 24
     1a2:	87 60       	ori	r24, 0x07	; 7
     1a4:	88 bb       	out	0x18, r24	; 24
		
		if (GETBIT(PIND,2) == 0) return keypad_matrix[0+4*i];
     1a6:	82 99       	sbic	0x10, 2	; 16
     1a8:	09 c0       	rjmp	.+18     	; 0x1bc <KPD_read+0x48>
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e0 5a       	subi	r30, 0xA0	; 160
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	80 81       	ld	r24, Z
     1ba:	08 95       	ret
		if (GETBIT(PIND,3) == 0) return keypad_matrix[1+4*i];
     1bc:	83 99       	sbic	0x10, 3	; 16
     1be:	09 c0       	rjmp	.+18     	; 0x1d2 <KPD_read+0x5e>
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	ee 0f       	add	r30, r30
     1c4:	ff 1f       	adc	r31, r31
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	ef 59       	subi	r30, 0x9F	; 159
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	80 81       	ld	r24, Z
     1d0:	08 95       	ret
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
     1d2:	84 99       	sbic	0x10, 4	; 16
     1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <KPD_read+0x74>
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ee 59       	subi	r30, 0x9E	; 158
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	80 81       	ld	r24, Z
     1e6:	08 95       	ret
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
     1e8:	85 99       	sbic	0x10, 5	; 16
     1ea:	09 c0       	rjmp	.+18     	; 0x1fe <KPD_read+0x8a>
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ed 59       	subi	r30, 0x9D	; 157
     1f8:	ff 4f       	sbci	r31, 0xFF	; 255
     1fa:	80 81       	ld	r24, Z
     1fc:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	8f e9       	ldi	r24, 0x9F	; 159
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <KPD_read+0x8e>
     206:	00 c0       	rjmp	.+0      	; 0x208 <KPD_read+0x94>
     208:	00 00       	nop
SETBIT(DDRB,3);
}

int8_t KPD_read(){

	for(uint8_t i = 0; i < 4 ; i++){
     20a:	ef 5f       	subi	r30, 0xFF	; 255
     20c:	e4 30       	cpi	r30, 0x04	; 4
     20e:	08 f4       	brcc	.+2      	; 0x212 <KPD_read+0x9e>
     210:	b3 cf       	rjmp	.-154    	; 0x178 <KPD_read+0x4>
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
		_delay_ms(1);
		
	}
	return -1;
     212:	8f ef       	ldi	r24, 0xFF	; 255

     214:	08 95       	ret

00000216 <LCD_write_command>:
	_delay_ms(20);
	LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	RS(0);
     216:	9b b3       	in	r25, 0x1b	; 27
     218:	9d 7f       	andi	r25, 0xFD	; 253
     21a:	9b bb       	out	0x1b, r25	; 27
	// send most byte
	D4(GETBIT(cmd,4));
     21c:	84 ff       	sbrs	r24, 4
     21e:	04 c0       	rjmp	.+8      	; 0x228 <LCD_write_command+0x12>
     220:	9b b3       	in	r25, 0x1b	; 27
     222:	98 60       	ori	r25, 0x08	; 8
     224:	9b bb       	out	0x1b, r25	; 27
     226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_write_command+0x18>
     228:	9b b3       	in	r25, 0x1b	; 27
     22a:	97 7f       	andi	r25, 0xF7	; 247
     22c:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(cmd,5));
     22e:	85 ff       	sbrs	r24, 5
     230:	04 c0       	rjmp	.+8      	; 0x23a <LCD_write_command+0x24>
     232:	9b b3       	in	r25, 0x1b	; 27
     234:	90 61       	ori	r25, 0x10	; 16
     236:	9b bb       	out	0x1b, r25	; 27
     238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_write_command+0x2a>
     23a:	9b b3       	in	r25, 0x1b	; 27
     23c:	9f 7e       	andi	r25, 0xEF	; 239
     23e:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(cmd,6));
     240:	86 ff       	sbrs	r24, 6
     242:	04 c0       	rjmp	.+8      	; 0x24c <LCD_write_command+0x36>
     244:	9b b3       	in	r25, 0x1b	; 27
     246:	90 62       	ori	r25, 0x20	; 32
     248:	9b bb       	out	0x1b, r25	; 27
     24a:	03 c0       	rjmp	.+6      	; 0x252 <LCD_write_command+0x3c>
     24c:	9b b3       	in	r25, 0x1b	; 27
     24e:	9f 7d       	andi	r25, 0xDF	; 223
     250:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(cmd,7));
     252:	88 23       	and	r24, r24
     254:	24 f4       	brge	.+8      	; 0x25e <LCD_write_command+0x48>
     256:	9b b3       	in	r25, 0x1b	; 27
     258:	90 64       	ori	r25, 0x40	; 64
     25a:	9b bb       	out	0x1b, r25	; 27
     25c:	03 c0       	rjmp	.+6      	; 0x264 <LCD_write_command+0x4e>
     25e:	9b b3       	in	r25, 0x1b	; 27
     260:	9f 7b       	andi	r25, 0xBF	; 191
     262:	9b bb       	out	0x1b, r25	; 27
	EN(1);
     264:	9b b3       	in	r25, 0x1b	; 27
     266:	94 60       	ori	r25, 0x04	; 4
     268:	9b bb       	out	0x1b, r25	; 27
     26a:	ef e9       	ldi	r30, 0x9F	; 159
     26c:	ff e0       	ldi	r31, 0x0F	; 15
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <LCD_write_command+0x58>
     272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_write_command+0x5e>
     274:	00 00       	nop
	_delay_ms(1);
	EN(0);
     276:	9b b3       	in	r25, 0x1b	; 27
     278:	9b 7f       	andi	r25, 0xFB	; 251
     27a:	9b bb       	out	0x1b, r25	; 27
     27c:	ef e9       	ldi	r30, 0x9F	; 159
     27e:	ff e0       	ldi	r31, 0x0F	; 15
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <LCD_write_command+0x6a>
     284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_write_command+0x70>
     286:	00 00       	nop
	_delay_ms(1);
	
	// send least byte
	
	D4(GETBIT(cmd,0));
     288:	80 ff       	sbrs	r24, 0
     28a:	04 c0       	rjmp	.+8      	; 0x294 <LCD_write_command+0x7e>
     28c:	9b b3       	in	r25, 0x1b	; 27
     28e:	98 60       	ori	r25, 0x08	; 8
     290:	9b bb       	out	0x1b, r25	; 27
     292:	03 c0       	rjmp	.+6      	; 0x29a <LCD_write_command+0x84>
     294:	9b b3       	in	r25, 0x1b	; 27
     296:	97 7f       	andi	r25, 0xF7	; 247
     298:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(cmd,1));
     29a:	81 ff       	sbrs	r24, 1
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <LCD_write_command+0x90>
     29e:	9b b3       	in	r25, 0x1b	; 27
     2a0:	90 61       	ori	r25, 0x10	; 16
     2a2:	9b bb       	out	0x1b, r25	; 27
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_write_command+0x96>
     2a6:	9b b3       	in	r25, 0x1b	; 27
     2a8:	9f 7e       	andi	r25, 0xEF	; 239
     2aa:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(cmd,2));
     2ac:	82 ff       	sbrs	r24, 2
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCD_write_command+0xa2>
     2b0:	9b b3       	in	r25, 0x1b	; 27
     2b2:	90 62       	ori	r25, 0x20	; 32
     2b4:	9b bb       	out	0x1b, r25	; 27
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_write_command+0xa8>
     2b8:	9b b3       	in	r25, 0x1b	; 27
     2ba:	9f 7d       	andi	r25, 0xDF	; 223
     2bc:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(cmd,3));
     2be:	83 ff       	sbrs	r24, 3
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_write_command+0xb4>
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	8b bb       	out	0x1b, r24	; 27
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LCD_write_command+0xba>
     2ca:	8b b3       	in	r24, 0x1b	; 27
     2cc:	8f 7b       	andi	r24, 0xBF	; 191
     2ce:	8b bb       	out	0x1b, r24	; 27
	EN(1);
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	84 60       	ori	r24, 0x04	; 4
     2d4:	8b bb       	out	0x1b, r24	; 27
     2d6:	8f e9       	ldi	r24, 0x9F	; 159
     2d8:	9f e0       	ldi	r25, 0x0F	; 15
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_write_command+0xc4>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_write_command+0xca>
     2e0:	00 00       	nop
	_delay_ms(1);
	EN(0);
     2e2:	8b b3       	in	r24, 0x1b	; 27
     2e4:	8b 7f       	andi	r24, 0xFB	; 251
     2e6:	8b bb       	out	0x1b, r24	; 27
     2e8:	ef e9       	ldi	r30, 0x9F	; 159
     2ea:	ff e0       	ldi	r31, 0x0F	; 15
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_write_command+0xd6>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_write_command+0xdc>
     2f2:	00 00       	nop
     2f4:	08 95       	ret

000002f6 <LCD_init>:
 *  Author: On Store
 */ 
#include "LCD_interface.h"
#include "ATmega32_header.h"
void LCD_init (){
	INIT_LCD();
     2f6:	8a b3       	in	r24, 0x1a	; 26
     2f8:	8e 67       	ori	r24, 0x7E	; 126
     2fa:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0X3);
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
     302:	8f e7       	ldi	r24, 0x7F	; 127
     304:	9e e3       	ldi	r25, 0x3E	; 62
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <LCD_init+0x10>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_init+0x16>
     30c:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0X3);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
     314:	8f e7       	ldi	r24, 0x7F	; 127
     316:	9e e3       	ldi	r25, 0x3E	; 62
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_init+0x22>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_init+0x28>
     31e:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0X3);
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
     326:	8f e7       	ldi	r24, 0x7F	; 127
     328:	9e e3       	ldi	r25, 0x3E	; 62
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_init+0x34>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_init+0x3a>
     330:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0X2);
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_command(0X28);
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_command(0X08);
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_command(0X01);
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_command(0X06);
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
     350:	9f ef       	ldi	r25, 0xFF	; 255
     352:	29 ef       	ldi	r18, 0xF9	; 249
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	91 50       	subi	r25, 0x01	; 1
     358:	20 40       	sbci	r18, 0x00	; 0
     35a:	80 40       	sbci	r24, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <LCD_init+0x60>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_init+0x6a>
     360:	00 00       	nop
	_delay_ms(20);
	LCD_write_command(0x0C);
     362:	8c e0       	ldi	r24, 0x0C	; 12
     364:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
     368:	08 95       	ret

0000036a <LCD_write_char>:
	EN(0);
	_delay_ms(1);
}

void LCD_write_char(uint8_t data){
	RS(1);
     36a:	9b b3       	in	r25, 0x1b	; 27
     36c:	92 60       	ori	r25, 0x02	; 2
     36e:	9b bb       	out	0x1b, r25	; 27
	// send most byte
	D4(GETBIT(data,4));
     370:	84 ff       	sbrs	r24, 4
     372:	04 c0       	rjmp	.+8      	; 0x37c <LCD_write_char+0x12>
     374:	9b b3       	in	r25, 0x1b	; 27
     376:	98 60       	ori	r25, 0x08	; 8
     378:	9b bb       	out	0x1b, r25	; 27
     37a:	03 c0       	rjmp	.+6      	; 0x382 <LCD_write_char+0x18>
     37c:	9b b3       	in	r25, 0x1b	; 27
     37e:	97 7f       	andi	r25, 0xF7	; 247
     380:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,5));
     382:	85 ff       	sbrs	r24, 5
     384:	04 c0       	rjmp	.+8      	; 0x38e <LCD_write_char+0x24>
     386:	9b b3       	in	r25, 0x1b	; 27
     388:	90 61       	ori	r25, 0x10	; 16
     38a:	9b bb       	out	0x1b, r25	; 27
     38c:	03 c0       	rjmp	.+6      	; 0x394 <LCD_write_char+0x2a>
     38e:	9b b3       	in	r25, 0x1b	; 27
     390:	9f 7e       	andi	r25, 0xEF	; 239
     392:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,6));
     394:	86 ff       	sbrs	r24, 6
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <LCD_write_char+0x36>
     398:	9b b3       	in	r25, 0x1b	; 27
     39a:	90 62       	ori	r25, 0x20	; 32
     39c:	9b bb       	out	0x1b, r25	; 27
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <LCD_write_char+0x3c>
     3a0:	9b b3       	in	r25, 0x1b	; 27
     3a2:	9f 7d       	andi	r25, 0xDF	; 223
     3a4:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(data,7));
     3a6:	88 23       	and	r24, r24
     3a8:	24 f4       	brge	.+8      	; 0x3b2 <LCD_write_char+0x48>
     3aa:	9b b3       	in	r25, 0x1b	; 27
     3ac:	90 64       	ori	r25, 0x40	; 64
     3ae:	9b bb       	out	0x1b, r25	; 27
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LCD_write_char+0x4e>
     3b2:	9b b3       	in	r25, 0x1b	; 27
     3b4:	9f 7b       	andi	r25, 0xBF	; 191
     3b6:	9b bb       	out	0x1b, r25	; 27
	EN(1);
     3b8:	9b b3       	in	r25, 0x1b	; 27
     3ba:	94 60       	ori	r25, 0x04	; 4
     3bc:	9b bb       	out	0x1b, r25	; 27
     3be:	ef e9       	ldi	r30, 0x9F	; 159
     3c0:	ff e0       	ldi	r31, 0x0F	; 15
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_write_char+0x58>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_write_char+0x5e>
     3c8:	00 00       	nop
	_delay_ms(1);
	EN(0);
     3ca:	9b b3       	in	r25, 0x1b	; 27
     3cc:	9b 7f       	andi	r25, 0xFB	; 251
     3ce:	9b bb       	out	0x1b, r25	; 27
     3d0:	ef e9       	ldi	r30, 0x9F	; 159
     3d2:	ff e0       	ldi	r31, 0x0F	; 15
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_write_char+0x6a>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_write_char+0x70>
     3da:	00 00       	nop
	_delay_ms(1);
	
	// send least byte
	
	D4(GETBIT(data,0));
     3dc:	80 ff       	sbrs	r24, 0
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <LCD_write_char+0x7e>
     3e0:	9b b3       	in	r25, 0x1b	; 27
     3e2:	98 60       	ori	r25, 0x08	; 8
     3e4:	9b bb       	out	0x1b, r25	; 27
     3e6:	03 c0       	rjmp	.+6      	; 0x3ee <LCD_write_char+0x84>
     3e8:	9b b3       	in	r25, 0x1b	; 27
     3ea:	97 7f       	andi	r25, 0xF7	; 247
     3ec:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,1));
     3ee:	81 ff       	sbrs	r24, 1
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <LCD_write_char+0x90>
     3f2:	9b b3       	in	r25, 0x1b	; 27
     3f4:	90 61       	ori	r25, 0x10	; 16
     3f6:	9b bb       	out	0x1b, r25	; 27
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fa:	9b b3       	in	r25, 0x1b	; 27
     3fc:	9f 7e       	andi	r25, 0xEF	; 239
     3fe:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,2));
     400:	82 ff       	sbrs	r24, 2
     402:	04 c0       	rjmp	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     404:	9b b3       	in	r25, 0x1b	; 27
     406:	90 62       	ori	r25, 0x20	; 32
     408:	9b bb       	out	0x1b, r25	; 27
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40c:	9b b3       	in	r25, 0x1b	; 27
     40e:	9f 7d       	andi	r25, 0xDF	; 223
     410:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(data,3));
     412:	83 ff       	sbrs	r24, 3
     414:	04 c0       	rjmp	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     416:	8b b3       	in	r24, 0x1b	; 27
     418:	80 64       	ori	r24, 0x40	; 64
     41a:	8b bb       	out	0x1b, r24	; 27
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41e:	8b b3       	in	r24, 0x1b	; 27
     420:	8f 7b       	andi	r24, 0xBF	; 191
     422:	8b bb       	out	0x1b, r24	; 27
	EN(1);
     424:	8b b3       	in	r24, 0x1b	; 27
     426:	84 60       	ori	r24, 0x04	; 4
     428:	8b bb       	out	0x1b, r24	; 27
     42a:	8f e9       	ldi	r24, 0x9F	; 159
     42c:	9f e0       	ldi	r25, 0x0F	; 15
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop
	_delay_ms(1);
	EN(0);
     436:	8b b3       	in	r24, 0x1b	; 27
     438:	8b 7f       	andi	r24, 0xFB	; 251
     43a:	8b bb       	out	0x1b, r24	; 27
     43c:	ef e9       	ldi	r30, 0x9F	; 159
     43e:	ff e0       	ldi	r31, 0x0F	; 15
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
     448:	08 95       	ret

0000044a <LCD_write_string>:
	_delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
     452:	c0 e0       	ldi	r28, 0x00	; 0
     454:	03 c0       	rjmp	.+6      	; 0x45c <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
     456:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
	_delay_ms(1);
	EN(0);
	_delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
     45a:	cf 5f       	subi	r28, 0xFF	; 255
     45c:	f8 01       	movw	r30, r16
     45e:	ec 0f       	add	r30, r28
     460:	f1 1d       	adc	r31, r1
     462:	80 81       	ld	r24, Z
     464:	81 11       	cpse	r24, r1
     466:	f7 cf       	rjmp	.-18     	; 0x456 <LCD_write_string+0xc>
		LCD_write_char(txt[i]);
	}
}
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <LCD_write_num>:
void LCD_write_num(uint32_t num){
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	2a 97       	sbiw	r28, 0x0a	; 10
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	uint8_t txt[10] = {0};
     486:	fe 01       	movw	r30, r28
     488:	31 96       	adiw	r30, 0x01	; 1
     48a:	2a e0       	ldi	r18, 0x0A	; 10
     48c:	df 01       	movw	r26, r30
     48e:	1d 92       	st	X+, r1
     490:	2a 95       	dec	r18
     492:	e9 f7       	brne	.-6      	; 0x48e <LCD_write_num+0x1e>
	int8_t i = 0;
	if(num == 0) {
     494:	61 15       	cp	r22, r1
     496:	71 05       	cpc	r23, r1
     498:	81 05       	cpc	r24, r1
     49a:	91 05       	cpc	r25, r1
     49c:	d1 f4       	brne	.+52     	; 0x4d2 <LCD_write_num+0x62>
		LCD_write_char('0');
     49e:	80 e3       	ldi	r24, 0x30	; 48
     4a0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
     4a4:	2c c0       	rjmp	.+88     	; 0x4fe <LCD_write_num+0x8e>
		return;
	}
	for (i = 0; num != 0; i++ )
	{
		txt[i] = num%10 + 48;
     4a6:	2a e0       	ldi	r18, 0x0A	; 10
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 43 08 	call	0x1086	; 0x1086 <__udivmodsi4>
     4b2:	e1 e0       	ldi	r30, 0x01	; 1
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	ec 0f       	add	r30, r28
     4b8:	fd 1f       	adc	r31, r29
     4ba:	e1 0f       	add	r30, r17
     4bc:	f1 1d       	adc	r31, r1
     4be:	17 fd       	sbrc	r17, 7
     4c0:	fa 95       	dec	r31
     4c2:	60 5d       	subi	r22, 0xD0	; 208
     4c4:	60 83       	st	Z, r22
		num = num  / 10 ;
     4c6:	62 2f       	mov	r22, r18
     4c8:	73 2f       	mov	r23, r19
     4ca:	84 2f       	mov	r24, r20
     4cc:	95 2f       	mov	r25, r21
	int8_t i = 0;
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	for (i = 0; num != 0; i++ )
     4ce:	1f 5f       	subi	r17, 0xFF	; 255
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <LCD_write_num+0x64>
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	61 15       	cp	r22, r1
     4d6:	71 05       	cpc	r23, r1
     4d8:	81 05       	cpc	r24, r1
     4da:	91 05       	cpc	r25, r1
     4dc:	21 f7       	brne	.-56     	; 0x4a6 <LCD_write_num+0x36>
	{
		txt[i] = num%10 + 48;
		num = num  / 10 ;
	}
	i--;
     4de:	11 50       	subi	r17, 0x01	; 1
	while(i >= 0){
     4e0:	0c c0       	rjmp	.+24     	; 0x4fa <LCD_write_num+0x8a>
		LCD_write_char(txt[i]);
     4e2:	e1 e0       	ldi	r30, 0x01	; 1
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	ec 0f       	add	r30, r28
     4e8:	fd 1f       	adc	r31, r29
     4ea:	e1 0f       	add	r30, r17
     4ec:	f1 1d       	adc	r31, r1
     4ee:	17 fd       	sbrc	r17, 7
     4f0:	fa 95       	dec	r31
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
		i--;
     4f8:	11 50       	subi	r17, 0x01	; 1
	{
		txt[i] = num%10 + 48;
		num = num  / 10 ;
	}
	i--;
	while(i >= 0){
     4fa:	11 23       	and	r17, r17
     4fc:	94 f7       	brge	.-28     	; 0x4e2 <LCD_write_num+0x72>
		LCD_write_char(txt[i]);
		i--;
	}
     4fe:	2a 96       	adiw	r28, 0x0a	; 10
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	08 95       	ret

00000512 <__vector_11>:
	SETBIT(TIMSK,TOIE0);
	guest_display();
	count=5;

}
ISR(TIMER0_OVF_vect){
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	8f 93       	push	r24
     51e:	9f 93       	push	r25
	
	static uint8_t admin_mode = 0;
	static uint8_t guest_mode = 0;
	admin_mode++;
     520:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <admin_mode.1818>
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <admin_mode.1818>
	guest_mode++;
     52a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <__data_end>
     52e:	9f 5f       	subi	r25, 0xFF	; 255
     530:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <__data_end>
	if (admin_mode==tick && state==0)			// 1.5sec
     534:	85 3f       	cpi	r24, 0xF5	; 245
     536:	a1 f4       	brne	.+40     	; 0x560 <__vector_11+0x4e>
     538:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     53c:	81 11       	cpse	r24, r1
     53e:	10 c0       	rjmp	.+32     	; 0x560 <__vector_11+0x4e>
	{
		
		TOGBIT(PORTC,0);
     540:	95 b3       	in	r25, 0x15	; 21
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	89 27       	eor	r24, r25
     546:	85 bb       	out	0x15, r24	; 21
		admin_mode=0;
     548:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <admin_mode.1818>
		guest_mode=0;
     54c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
		count=0;
     550:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <count>
		start_msg=0;
     554:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <start_msg>
		CLRBIT(TIMSK,TOIE0);
     558:	89 b7       	in	r24, 0x39	; 57
     55a:	8e 7f       	andi	r24, 0xFE	; 254
     55c:	89 bf       	out	0x39, r24	; 57
     55e:	14 c0       	rjmp	.+40     	; 0x588 <__vector_11+0x76>
	}
	else if (guest_mode==tick && state==1)		// 1.5sec
     560:	95 3f       	cpi	r25, 0xF5	; 245
     562:	91 f4       	brne	.+36     	; 0x588 <__vector_11+0x76>
     564:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	71 f4       	brne	.+28     	; 0x588 <__vector_11+0x76>
	{
		
		CLRBIT(PORTC,2);
     56c:	85 b3       	in	r24, 0x15	; 21
     56e:	8b 7f       	andi	r24, 0xFB	; 251
     570:	85 bb       	out	0x15, r24	; 21
		admin_mode=0;
     572:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <admin_mode.1818>
		guest_mode=0;
     576:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
		count=0;
     57a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <count>
		start_msg=0;
     57e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <start_msg>
		CLRBIT(TIMSK,TOIE0);
     582:	89 b7       	in	r24, 0x39	; 57
     584:	8e 7f       	andi	r24, 0xFE	; 254
     586:	89 bf       	out	0x39, r24	; 57
	}
}
     588:	9f 91       	pop	r25
     58a:	8f 91       	pop	r24
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63
     590:	0f 90       	pop	r0
     592:	1f 90       	pop	r1
     594:	18 95       	reti

00000596 <admin_display>:
void admin_display(){
	LCD_write_command(1);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("1>Room1");
     59c:	80 e7       	ldi	r24, 0x70	; 112
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0x88);
     5a4:	88 e8       	ldi	r24, 0x88	; 136
     5a6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("2>Room2");
     5aa:	88 e7       	ldi	r24, 0x78	; 120
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc0);
     5b2:	80 ec       	ldi	r24, 0xC0	; 192
     5b4:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("3>Room3");
     5b8:	80 e8       	ldi	r24, 0x80	; 128
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc8);
     5c0:	88 ec       	ldi	r24, 0xC8	; 200
     5c2:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("4>More");
     5c6:	88 e8       	ldi	r24, 0x88	; 136
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     5ce:	08 95       	ret

000005d0 <ADMIN>:
		}
		
	}
}
void ADMIN(){
	SETBIT(PORTC,0);
     5d0:	85 b3       	in	r24, 0x15	; 21
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	85 bb       	out	0x15, r24	; 21
	SETBIT(TIMSK,TOIE0);
     5d6:	89 b7       	in	r24, 0x39	; 57
     5d8:	81 60       	ori	r24, 0x01	; 1
     5da:	89 bf       	out	0x39, r24	; 57
	admin_display();
     5dc:	0e 94 cb 02 	call	0x596	; 0x596 <admin_display>
	count=5;
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     5e6:	08 95       	ret

000005e8 <admin_display2>:
	LCD_write_string("3>Room3");
	LCD_write_command(0xc8);
	LCD_write_string("4>More");
}
void admin_display2(){
	LCD_write_command(1);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("4>Room4");
     5ee:	8f e8       	ldi	r24, 0x8F	; 143
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0x88);
     5f6:	88 e8       	ldi	r24, 0x88	; 136
     5f8:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("5>TV");
     5fc:	87 e9       	ldi	r24, 0x97	; 151
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc0);
     604:	80 ec       	ldi	r24, 0xC0	; 192
     606:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("6>COND");
     60a:	8c e9       	ldi	r24, 0x9C	; 156
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc8);
     612:	88 ec       	ldi	r24, 0xC8	; 200
     614:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("7>back");
     618:	83 ea       	ldi	r24, 0xA3	; 163
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     620:	08 95       	ret

00000622 <guest_display>:
}
void guest_display(){
	LCD_write_command(1);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("1>Room1");
     628:	80 e7       	ldi	r24, 0x70	; 112
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0x88);
     630:	88 e8       	ldi	r24, 0x88	; 136
     632:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("2>Room2");
     636:	88 e7       	ldi	r24, 0x78	; 120
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc0);
     63e:	80 ec       	ldi	r24, 0xC0	; 192
     640:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("3>Room3");
     644:	80 e8       	ldi	r24, 0x80	; 128
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
	LCD_write_command(0xc8);
     64c:	88 ec       	ldi	r24, 0xC8	; 200
     64e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
	LCD_write_string("4>Room4");
     652:	8f e8       	ldi	r24, 0x8F	; 143
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     65a:	08 95       	ret

0000065c <GUEST>:
	admin_display();
	count=5;
	
}
void GUEST(){
	SETBIT(PORTC,2);
     65c:	85 b3       	in	r24, 0x15	; 21
     65e:	84 60       	ori	r24, 0x04	; 4
     660:	85 bb       	out	0x15, r24	; 21
	SETBIT(TIMSK,TOIE0);
     662:	89 b7       	in	r24, 0x39	; 57
     664:	81 60       	ori	r24, 0x01	; 1
     666:	89 bf       	out	0x39, r24	; 57
	guest_display();
     668:	0e 94 11 03 	call	0x622	; 0x622 <guest_display>
	count=5;
     66c:	85 e0       	ldi	r24, 0x05	; 5
     66e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     672:	08 95       	ret

00000674 <get_password>:
		
	}
}

void get_password ()
{
     674:	cf 93       	push	r28
	int8_t key=KPD_read();
     676:	0e 94 ba 00 	call	0x174	; 0x174 <KPD_read>
     67a:	c8 2f       	mov	r28, r24
	if(key != -1 && key!='N'){
     67c:	8f 3f       	cpi	r24, 0xFF	; 255
     67e:	09 f4       	brne	.+2      	; 0x682 <get_password+0xe>
     680:	d4 c3       	rjmp	.+1960   	; 0xe2a <__stack+0x5cb>
     682:	8e 34       	cpi	r24, 0x4E	; 78
     684:	09 f4       	brne	.+2      	; 0x688 <get_password+0x14>
     686:	d1 c3       	rjmp	.+1954   	; 0xe2a <__stack+0x5cb>
		switch (count)
     688:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <count>
     68c:	82 2f       	mov	r24, r18
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	87 30       	cpi	r24, 0x07	; 7
     692:	91 05       	cpc	r25, r1
     694:	08 f0       	brcs	.+2      	; 0x698 <get_password+0x24>
     696:	c9 c3       	rjmp	.+1938   	; 0xe2a <__stack+0x5cb>
     698:	fc 01       	movw	r30, r24
     69a:	e6 5d       	subi	r30, 0xD6	; 214
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__tablejump2__>
		{
			case 0 :											//Get state (Admin or Guest)
			if (key-48==0)
     6a2:	c0 33       	cpi	r28, 0x30	; 48
     6a4:	69 f4       	brne	.+26     	; 0x6c0 <get_password+0x4c>
			{
				state=0;
     6a6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <state>
				count++;
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <count>
				LCD_write_command(1);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("Admin password");
     6b6:	8a ea       	ldi	r24, 0xAA	; 170
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     6be:	2d c0       	rjmp	.+90     	; 0x71a <get_password+0xa6>
				
			}
			else if (key-48==1)
     6c0:	c1 33       	cpi	r28, 0x31	; 49
     6c2:	69 f4       	brne	.+26     	; 0x6de <get_password+0x6a>
			{
				state=1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <state>
				count++;
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <count>
				LCD_write_command(1);
     6d0:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("Guest password");
     6d4:	89 eb       	ldi	r24, 0xB9	; 185
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     6dc:	1e c0       	rjmp	.+60     	; 0x71a <get_password+0xa6>
				
			}
			else {
				LCD_write_command(1);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("wrong entry");
     6e4:	88 ec       	ldi	r24, 0xC8	; 200
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	83 ec       	ldi	r24, 0xC3	; 195
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <get_password+0x7e>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <get_password+0x88>
     6fc:	00 00       	nop
				_delay_ms(200);
				LCD_write_command(1);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("Select Mode : ");
     704:	84 ed       	ldi	r24, 0xD4	; 212
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				LCD_write_command(0xc0);
     70c:	80 ec       	ldi	r24, 0xC0	; 192
     70e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("0>Admin  1>Guest");
     712:	83 ee       	ldi	r24, 0xE3	; 227
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	83 ec       	ldi	r24, 0xC3	; 195
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	21 50       	subi	r18, 0x01	; 1
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <get_password+0xac>
     728:	00 c0       	rjmp	.+0      	; 0x72a <get_password+0xb6>
     72a:	00 00       	nop
     72c:	7e c3       	rjmp	.+1788   	; 0xe2a <__stack+0x5cb>
			}
			_delay_ms(200);
			break;
			case 1 :													//Get first Digit
			LCD_write_command(0xc3);
     72e:	83 ec       	ldi	r24, 0xC3	; 195
     730:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char(key);
     734:	8c 2f       	mov	r24, r28
     736:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	81 ee       	ldi	r24, 0xE1	; 225
     73e:	94 e0       	ldi	r25, 0x04	; 4
     740:	21 50       	subi	r18, 0x01	; 1
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <get_password+0xcc>
     748:	00 c0       	rjmp	.+0      	; 0x74a <get_password+0xd6>
     74a:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc3);
     74c:	83 ec       	ldi	r24, 0xC3	; 195
     74e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char('*');
     752:	8a e2       	ldi	r24, 0x2A	; 42
     754:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
			c1=key-48;													//First digit of entered password from user
     758:	c0 53       	subi	r28, 0x30	; 48
     75a:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <c1>
			count++;
     75e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <count>
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
			break;
     768:	60 c3       	rjmp	.+1728   	; 0xe2a <__stack+0x5cb>
			case 2 :													//Get second Digit
			LCD_write_command(0xc4);
     76a:	84 ec       	ldi	r24, 0xC4	; 196
     76c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char(key);
     770:	8c 2f       	mov	r24, r28
     772:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	81 ee       	ldi	r24, 0xE1	; 225
     77a:	94 e0       	ldi	r25, 0x04	; 4
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <get_password+0x108>
     784:	00 c0       	rjmp	.+0      	; 0x786 <get_password+0x112>
     786:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc4);
     788:	84 ec       	ldi	r24, 0xC4	; 196
     78a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char('*');
     78e:	8a e2       	ldi	r24, 0x2A	; 42
     790:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
			c2=key-48;													//Second digit of entered password from user
     794:	c0 53       	subi	r28, 0x30	; 48
     796:	c0 93 16 02 	sts	0x0216, r28	; 0x800216 <c2>
			count++;
     79a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <count>
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
			break;
     7a4:	42 c3       	rjmp	.+1668   	; 0xe2a <__stack+0x5cb>
			case 3 :													//Get third Digit
			LCD_write_command(0xc5);
     7a6:	85 ec       	ldi	r24, 0xC5	; 197
     7a8:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char(key);
     7ac:	8c 2f       	mov	r24, r28
     7ae:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
     7b2:	2f ef       	ldi	r18, 0xFF	; 255
     7b4:	81 ee       	ldi	r24, 0xE1	; 225
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <get_password+0x144>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <get_password+0x14e>
     7c2:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc5);
     7c4:	85 ec       	ldi	r24, 0xC5	; 197
     7c6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char('*');
     7ca:	8a e2       	ldi	r24, 0x2A	; 42
     7cc:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
			c3=key-48;													// third digit of entered password from user
     7d0:	c0 53       	subi	r28, 0x30	; 48
     7d2:	c0 93 1d 02 	sts	0x021D, r28	; 0x80021d <c3>
			count++;
     7d6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <count>
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
			break;
     7e0:	24 c3       	rjmp	.+1608   	; 0xe2a <__stack+0x5cb>
			case 4 :													//Get forth Digit
			LCD_write_command(0xc6);
     7e2:	86 ec       	ldi	r24, 0xC6	; 198
     7e4:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char(key);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	81 ee       	ldi	r24, 0xE1	; 225
     7f2:	94 e0       	ldi	r25, 0x04	; 4
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	90 40       	sbci	r25, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <get_password+0x180>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <get_password+0x18a>
     7fe:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc6);
     800:	86 ec       	ldi	r24, 0xC6	; 198
     802:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_char('*');
     806:	8a e2       	ldi	r24, 0x2A	; 42
     808:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_write_char>
			LCD_write_command(1);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			c4=key-48;												   // forth digit of entered password from user
     812:	c0 53       	subi	r28, 0x30	; 48
     814:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <c4>
			
			if (( c1==a1&&c2==a2&&c3==a3&&c4==a4) && state==0 && initial==0){
     818:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <c1>
     81c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <a1>
     820:	68 13       	cpse	r22, r24
     822:	22 c0       	rjmp	.+68     	; 0x868 <__stack+0x9>
     824:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <c2>
     828:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <a2>
     82c:	98 13       	cpse	r25, r24
     82e:	1c c0       	rjmp	.+56     	; 0x868 <__stack+0x9>
     830:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <c3>
     834:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <a3>
     838:	98 13       	cpse	r25, r24
     83a:	16 c0       	rjmp	.+44     	; 0x868 <__stack+0x9>
     83c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <a4>
     840:	c8 13       	cpse	r28, r24
     842:	12 c0       	rjmp	.+36     	; 0x868 <__stack+0x9>
     844:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     848:	81 11       	cpse	r24, r1
     84a:	0e c0       	rjmp	.+28     	; 0x868 <__stack+0x9>
     84c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     850:	81 11       	cpse	r24, r1
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
				/*call function to enter admin mode */
				key=-1;
				ADMIN();
     854:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ADMIN>
				block_mode=0;
     858:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <block_mode>
				EEPROM_write(30,0);
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	8e e1       	ldi	r24, 0x1E	; 30
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				key=-1;
     866:	e1 c2       	rjmp	.+1474   	; 0xe2a <__stack+0x5cb>
			}
			else if (( c1==g1&&c2==g2&&c3==g3&&c4==g4)&& state==1 && initial==0 ){
     868:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <g1>
     86c:	68 13       	cpse	r22, r24
     86e:	22 c0       	rjmp	.+68     	; 0x8b4 <__stack+0x55>
     870:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <c2>
     874:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <g2>
     878:	98 13       	cpse	r25, r24
     87a:	1c c0       	rjmp	.+56     	; 0x8b4 <__stack+0x55>
     87c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <c3>
     880:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g3>
     884:	98 13       	cpse	r25, r24
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <__stack+0x55>
     888:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <g4>
     88c:	c8 13       	cpse	r28, r24
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <__stack+0x55>
     890:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	71 f4       	brne	.+28     	; 0x8b4 <__stack+0x55>
     898:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     89c:	81 11       	cpse	r24, r1
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <__stack+0x55>
				/*call function to enter guest mode */
				key=-1;
				GUEST();
     8a0:	0e 94 2e 03 	call	0x65c	; 0x65c <GUEST>
				block_mode=0;
     8a4:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <block_mode>
				EEPROM_write(30,0);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	8e e1       	ldi	r24, 0x1E	; 30
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				key=-1;
     8b2:	bb c2       	rjmp	.+1398   	; 0xe2a <__stack+0x5cb>
			}
			else if ( initial==1 && state==0 ){
     8b4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	29 f5       	brne	.+74     	; 0x906 <__stack+0xa7>
     8bc:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <state>
     8c0:	91 11       	cpse	r25, r1
     8c2:	21 c0       	rjmp	.+66     	; 0x906 <__stack+0xa7>
				/*Store Admin Password in EEPROM*/
				EEPROM_write(20,c1);
     8c4:	84 e1       	ldi	r24, 0x14	; 20
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(21,c2);
     8cc:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <c2>
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(22,c3);
     8d8:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <c3>
     8dc:	86 e1       	ldi	r24, 0x16	; 22
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(23,c4);
     8e4:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <c4>
     8e8:	87 e1       	ldi	r24, 0x17	; 23
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(24,15);
     8f0:	6f e0       	ldi	r22, 0x0F	; 15
     8f2:	88 e1       	ldi	r24, 0x18	; 24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				initial++;
     8fa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <initial>
     904:	92 c2       	rjmp	.+1316   	; 0xe2a <__stack+0x5cb>
				
			}
			else if (initial==3 && state==1 ){
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
     90a:	5f c0       	rjmp	.+190    	; 0x9ca <__stack+0x16b>
     90c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	09 f0       	breq	.+2      	; 0x916 <__stack+0xb7>
     914:	5a c0       	rjmp	.+180    	; 0x9ca <__stack+0x16b>
				/*Store Guest Password in EEPROM*/
				EEPROM_write(25,c1);
     916:	89 e1       	ldi	r24, 0x19	; 25
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(26,c2);
     91e:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <c2>
     922:	8a e1       	ldi	r24, 0x1A	; 26
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(27,c3);
     92a:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <c3>
     92e:	8b e1       	ldi	r24, 0x1B	; 27
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(28,c4);
     936:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <c4>
     93a:	8c e1       	ldi	r24, 0x1C	; 28
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				EEPROM_write(29,15);
     942:	6f e0       	ldi	r22, 0x0F	; 15
     944:	8d e1       	ldi	r24, 0x1D	; 29
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
				initial++;
     94c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <initial>
				LCD_write_command(1);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				a1=EEPROM_read(20);					 // first digit of admin mode
     95c:	84 e1       	ldi	r24, 0x14	; 20
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     964:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <a1>
				a2=EEPROM_read(21);					 // second digit of admin mode
     968:	85 e1       	ldi	r24, 0x15	; 21
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     970:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <a2>
				a3=EEPROM_read(22);					 // third digit of admin mode
     974:	86 e1       	ldi	r24, 0x16	; 22
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     97c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <a3>
				a4=EEPROM_read(23);	                 // forth digit of admin mode
     980:	87 e1       	ldi	r24, 0x17	; 23
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     988:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <a4>
				g1=EEPROM_read(25);					 // first digit of guest mode
     98c:	89 e1       	ldi	r24, 0x19	; 25
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     994:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <g1>
				g2=EEPROM_read(26);					 // second digit of guest mode
     998:	8a e1       	ldi	r24, 0x1A	; 26
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     9a0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <g2>
				g3=EEPROM_read(27);				     // third digit of guest mode
     9a4:	8b e1       	ldi	r24, 0x1B	; 27
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     9ac:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g3>
				g4=EEPROM_read(28);					 // forth digit of guest mode
     9b0:	8c e1       	ldi	r24, 0x1C	; 28
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     9b8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <g4>
				start_msg=0;
     9bc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <start_msg>
				initial=0;
     9c0:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <initial>
				count=0;
     9c4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <count>
     9c8:	30 c2       	rjmp	.+1120   	; 0xe2a <__stack+0x5cb>
			}
			
			else {
				/*Check wrong tries and select going to block mode or not*/
				block_mode++;
     9ca:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <block_mode>
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <block_mode>
				LCD_write_command(1);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("Wrong password");
     9da:	84 ef       	ldi	r24, 0xF4	; 244
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     9e2:	2f ef       	ldi	r18, 0xFF	; 255
     9e4:	82 e5       	ldi	r24, 0x52	; 82
     9e6:	97 e0       	ldi	r25, 0x07	; 7
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	80 40       	sbci	r24, 0x00	; 0
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <__stack+0x189>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <__stack+0x193>
     9f2:	00 00       	nop
				_delay_ms(150);
				LCD_write_command(1);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_num(3-block_mode);
     9fa:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <block_mode>
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	68 1b       	sub	r22, r24
     a04:	71 09       	sbc	r23, r1
     a06:	07 2e       	mov	r0, r23
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	0e 94 38 02 	call	0x470	; 0x470 <LCD_write_num>
				LCD_write_string(" Tries left");
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				EEPROM_write(30,block_mode);
     a1a:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <block_mode>
     a1e:	8e e1       	ldi	r24, 0x1E	; 30
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
     a26:	2f ef       	ldi	r18, 0xFF	; 255
     a28:	81 ee       	ldi	r24, 0xE1	; 225
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	80 40       	sbci	r24, 0x00	; 0
     a30:	90 40       	sbci	r25, 0x00	; 0
     a32:	e1 f7       	brne	.-8      	; 0xa2c <__stack+0x1cd>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <__stack+0x1d7>
     a36:	00 00       	nop
				_delay_ms(100);
				count=1;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
				if(block_mode==3){
     a3e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <block_mode>
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	f1 c1       	rjmp	.+994    	; 0xe2a <__stack+0x5cb>
					SETBIT(PORTC,4);
     a48:	85 b3       	in	r24, 0x15	; 21
     a4a:	80 61       	ori	r24, 0x10	; 16
     a4c:	85 bb       	out	0x15, r24	; 21
					LCD_write_command(1);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("you are blocked");
     a54:	8f e0       	ldi	r24, 0x0F	; 15
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     a5c:	80 ec       	ldi	r24, 0xC0	; 192
     a5e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("for 20 sec");
     a62:	8f e1       	ldi	r24, 0x1F	; 31
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	87 ea       	ldi	r24, 0xA7	; 167
     a6e:	91 e6       	ldi	r25, 0x61	; 97
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <__stack+0x211>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <__stack+0x21b>
     a7a:	00 00       	nop
					_delay_ms(block_timer);
					CLRBIT(PORTC,4);
     a7c:	85 b3       	in	r24, 0x15	; 21
     a7e:	8f 7e       	andi	r24, 0xEF	; 239
     a80:	85 bb       	out	0x15, r24	; 21
					LCD_write_command(1);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Enter right pass");
     a88:	8a e2       	ldi	r24, 0x2A	; 42
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					block_mode=0;
     a90:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <block_mode>
					EEPROM_write(30,0);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	8e e1       	ldi	r24, 0x1E	; 30
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
     a9e:	c5 c1       	rjmp	.+906    	; 0xe2a <__stack+0x5cb>
				}
				
			}
			break;
			case 5:										//To get selection of the room you want to control
			switch (key){
     aa0:	8c 2f       	mov	r24, r28
     aa2:	0c 2e       	mov	r0, r28
     aa4:	00 0c       	add	r0, r0
     aa6:	99 0b       	sbc	r25, r25
     aa8:	aa 0b       	sbc	r26, r26
     aaa:	bb 0b       	sbc	r27, r27
     aac:	fc 01       	movw	r30, r24
     aae:	31 96       	adiw	r30, 0x01	; 1
     ab0:	e9 33       	cpi	r30, 0x39	; 57
     ab2:	f1 05       	cpc	r31, r1
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <__stack+0x259>
     ab6:	24 c1       	rjmp	.+584    	; 0xd00 <__stack+0x4a1>
     ab8:	ef 5c       	subi	r30, 0xCF	; 207
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__tablejump2__>
				case '1':								//ROOM1
				if(disp_falg==0){
     ac0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <disp_falg>
     ac4:	81 11       	cpse	r24, r1
     ac6:	b1 c1       	rjmp	.+866    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Room 1");
     ace:	8b e3       	ldi	r24, 0x3B	; 59
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     ad6:	80 ec       	ldi	r24, 0xC0	; 192
     ad8:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     adc:	82 e4       	ldi	r24, 0x42	; 66
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					button_num=key;
     ae4:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
					CLRBIT(PORTB,4);
     ae8:	88 b3       	in	r24, 0x18	; 24
     aea:	8f 7e       	andi	r24, 0xEF	; 239
     aec:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     aee:	8c 2f       	mov	r24, r28
     af0:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     af4:	88 b3       	in	r24, 0x18	; 24
     af6:	80 61       	ori	r24, 0x10	; 16
     af8:	88 bb       	out	0x18, r24	; 24
					key=-1;
					count=6;
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     b00:	94 c1       	rjmp	.+808    	; 0xe2a <__stack+0x5cb>
				}
				//else{key=-1;}
				break;
				case '2':								//ROOM2
				if(disp_falg==0){
     b02:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <disp_falg>
     b06:	81 11       	cpse	r24, r1
     b08:	90 c1       	rjmp	.+800    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Room 2");
     b10:	84 e5       	ldi	r24, 0x54	; 84
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     b18:	80 ec       	ldi	r24, 0xC0	; 192
     b1a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     b1e:	82 e4       	ldi	r24, 0x42	; 66
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					button_num=key;
     b26:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
					CLRBIT(PORTB,4);
     b2a:	88 b3       	in	r24, 0x18	; 24
     b2c:	8f 7e       	andi	r24, 0xEF	; 239
     b2e:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     b30:	8c 2f       	mov	r24, r28
     b32:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     b36:	88 b3       	in	r24, 0x18	; 24
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	88 bb       	out	0x18, r24	; 24
					key=-1;
					count=6;
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     b42:	73 c1       	rjmp	.+742    	; 0xe2a <__stack+0x5cb>
				}
				break;
				case '3':								//ROOM3
				if(disp_falg==0){
     b44:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <disp_falg>
     b48:	81 11       	cpse	r24, r1
     b4a:	6f c1       	rjmp	.+734    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Room 3");
     b52:	8b e5       	ldi	r24, 0x5B	; 91
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     b60:	82 e4       	ldi	r24, 0x42	; 66
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					button_num=key;
     b68:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
					CLRBIT(PORTB,4);
     b6c:	88 b3       	in	r24, 0x18	; 24
     b6e:	8f 7e       	andi	r24, 0xEF	; 239
     b70:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     b72:	8c 2f       	mov	r24, r28
     b74:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     b78:	88 b3       	in	r24, 0x18	; 24
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	88 bb       	out	0x18, r24	; 24
					key=-1;
					count=6;
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     b84:	52 c1       	rjmp	.+676    	; 0xe2a <__stack+0x5cb>
				}
				break;
				case '4':								//ROOM4
				button_num=key;
     b86:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
				if (state==1){
     b8a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	d1 f4       	brne	.+52     	; 0xbc6 <__stack+0x367>
					LCD_write_command(1);
     b92:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Room 4");
     b96:	82 e6       	ldi	r24, 0x62	; 98
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     b9e:	80 ec       	ldi	r24, 0xC0	; 192
     ba0:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     ba4:	82 e4       	ldi	r24, 0x42	; 66
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					CLRBIT(PORTB,4);
     bac:	88 b3       	in	r24, 0x18	; 24
     bae:	8f 7e       	andi	r24, 0xEF	; 239
     bb0:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     bb2:	8c 2f       	mov	r24, r28
     bb4:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     bb8:	88 b3       	in	r24, 0x18	; 24
     bba:	80 61       	ori	r24, 0x10	; 16
     bbc:	88 bb       	out	0x18, r24	; 24
					key=-1;
					count=6;
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     bc4:	32 c1       	rjmp	.+612    	; 0xe2a <__stack+0x5cb>
				}
				else if(state==0 && disp_falg==0){
     bc6:	81 11       	cpse	r24, r1
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <__stack+0x37f>
     bca:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <disp_falg>
     bce:	91 11       	cpse	r25, r1
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <__stack+0x37f>
					key=-1;
					admin_display2();
     bd2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <admin_display2>
				disp_falg=1;}
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <disp_falg>
     bdc:	26 c1       	rjmp	.+588    	; 0xe2a <__stack+0x5cb>
				else if (state==0 && disp_falg==1){
     bde:	81 11       	cpse	r24, r1
     be0:	24 c1       	rjmp	.+584    	; 0xe2a <__stack+0x5cb>
     be2:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <disp_falg>
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	09 f0       	breq	.+2      	; 0xbec <__stack+0x38d>
     bea:	1f c1       	rjmp	.+574    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     bec:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("Room 4");
     bf0:	82 e6       	ldi	r24, 0x62	; 98
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     bf8:	80 ec       	ldi	r24, 0xC0	; 192
     bfa:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     bfe:	82 e4       	ldi	r24, 0x42	; 66
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					CLRBIT(PORTB,4);
     c06:	88 b3       	in	r24, 0x18	; 24
     c08:	8f 7e       	andi	r24, 0xEF	; 239
     c0a:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     c0c:	8c 2f       	mov	r24, r28
     c0e:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     c12:	88 b3       	in	r24, 0x18	; 24
     c14:	80 61       	ori	r24, 0x10	; 16
     c16:	88 bb       	out	0x18, r24	; 24
					key=-1;
					count=6;
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
					disp_falg=0;
     c1e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <disp_falg>
     c22:	03 c1       	rjmp	.+518    	; 0xe2a <__stack+0x5cb>
				}
				else {key=-1;}
				break;
				case '5':											//TV
				button_num=key;
     c24:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
				if (state==0 && disp_falg==1){
     c28:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     c2c:	81 11       	cpse	r24, r1
     c2e:	21 c0       	rjmp	.+66     	; 0xc72 <__stack+0x413>
     c30:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <disp_falg>
     c34:	91 30       	cpi	r25, 0x01	; 1
     c36:	e9 f4       	brne	.+58     	; 0xc72 <__stack+0x413>
					LCD_write_command(1);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("TV");
     c3e:	89 e9       	ldi	r24, 0x99	; 153
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     c46:	80 ec       	ldi	r24, 0xC0	; 192
     c48:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     c4c:	82 e4       	ldi	r24, 0x42	; 66
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					CLRBIT(PORTB,4);
     c54:	88 b3       	in	r24, 0x18	; 24
     c56:	8f 7e       	andi	r24, 0xEF	; 239
     c58:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     c5a:	8c 2f       	mov	r24, r28
     c5c:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     c60:	88 b3       	in	r24, 0x18	; 24
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	88 bb       	out	0x18, r24	; 24
					disp_falg=0;
     c66:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <disp_falg>
					key=-1;
					count=6;
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     c70:	dc c0       	rjmp	.+440    	; 0xe2a <__stack+0x5cb>
				}
				else if(state==1) {
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f0       	breq	.+2      	; 0xc78 <__stack+0x419>
     c76:	d9 c0       	rjmp	.+434    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     c78:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					guest_display();
     c7c:	0e 94 11 03 	call	0x622	; 0x622 <guest_display>
     c80:	d4 c0       	rjmp	.+424    	; 0xe2a <__stack+0x5cb>
				}
				break;
				case '6':										//Air_COND
				button_num=key;
     c82:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
				if(state==0 && disp_falg==1){
     c86:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     c8a:	81 11       	cpse	r24, r1
     c8c:	21 c0       	rjmp	.+66     	; 0xcd0 <__stack+0x471>
     c8e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <disp_falg>
     c92:	91 30       	cpi	r25, 0x01	; 1
     c94:	e9 f4       	brne	.+58     	; 0xcd0 <__stack+0x471>
					LCD_write_command(1);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("COND");
     c9c:	8e e9       	ldi	r24, 0x9E	; 158
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					LCD_write_command(0xc0);
     ca4:	80 ec       	ldi	r24, 0xC0	; 192
     ca6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
     caa:	82 e4       	ldi	r24, 0x42	; 66
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
					CLRBIT(PORTB,4);
     cb2:	88 b3       	in	r24, 0x18	; 24
     cb4:	8f 7e       	andi	r24, 0xEF	; 239
     cb6:	88 bb       	out	0x18, r24	; 24
					SPI_send_char(key);
     cb8:	8c 2f       	mov	r24, r28
     cba:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
					SETBIT(PORTB,4);
     cbe:	88 b3       	in	r24, 0x18	; 24
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	88 bb       	out	0x18, r24	; 24
					disp_falg=0;
     cc4:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <disp_falg>
					key=-1;
					count=6;
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     cce:	ad c0       	rjmp	.+346    	; 0xe2a <__stack+0x5cb>
				}
				else if(state==1) {
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <__stack+0x477>
     cd4:	aa c0       	rjmp	.+340    	; 0xe2a <__stack+0x5cb>
					LCD_write_command(1);
     cd6:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
					guest_display();
     cda:	0e 94 11 03 	call	0x622	; 0x622 <guest_display>
     cde:	a5 c0       	rjmp	.+330    	; 0xe2a <__stack+0x5cb>
				}
				break;
				case '7':									//Display first page
				button_num=key;
     ce0:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <button_num>
				if(state==0&&disp_falg==1){
     ce4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     ce8:	81 11       	cpse	r24, r1
     cea:	9f c0       	rjmp	.+318    	; 0xe2a <__stack+0x5cb>
     cec:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <disp_falg>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <__stack+0x497>
     cf4:	9a c0       	rjmp	.+308    	; 0xe2a <__stack+0x5cb>
					admin_display();
     cf6:	0e 94 cb 02 	call	0x596	; 0x596 <admin_display>
					disp_falg=0;
     cfa:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <disp_falg>
     cfe:	95 c0       	rjmp	.+298    	; 0xe2a <__stack+0x5cb>
				else{key=-1;}
				break;
				case -1:
				break;
				default:
				if(state==0){admin_display();}
     d00:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     d04:	81 11       	cpse	r24, r1
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__stack+0x4af>
     d08:	0e 94 cb 02 	call	0x596	; 0x596 <admin_display>
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__stack+0x4b7>
				else if(state==1){guest_display();}
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	11 f4       	brne	.+4      	; 0xd16 <__stack+0x4b7>
     d12:	0e 94 11 03 	call	0x622	; 0x622 <guest_display>
				disp_falg=0;
     d16:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <disp_falg>
				break;
     d1a:	87 c0       	rjmp	.+270    	; 0xe2a <__stack+0x5cb>
			}
			break;
			case 6:													//To select action on the room yo selected in case 5
			switch (key){
     d1c:	c2 33       	cpi	r28, 0x32	; 50
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__stack+0x523>
     d20:	c3 33       	cpi	r28, 0x33	; 51
     d22:	09 f4       	brne	.+2      	; 0xd26 <__stack+0x4c7>
     d24:	59 c0       	rjmp	.+178    	; 0xdd8 <__stack+0x579>
     d26:	c1 33       	cpi	r28, 0x31	; 49
     d28:	09 f0       	breq	.+2      	; 0xd2c <__stack+0x4cd>
     d2a:	71 c0       	rjmp	.+226    	; 0xe0e <__stack+0x5af>
				case '1':											//Status ON
				LCD_write_command(1);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("status:   on ");
     d32:	89 e6       	ldi	r24, 0x69	; 105
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				LCD_write_command(0xc0);
     d3a:	80 ec       	ldi	r24, 0xC0	; 192
     d3c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("2>off  3>back");
     d40:	87 e7       	ldi	r24, 0x77	; 119
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				CLRBIT(PORTB,4);
     d48:	88 b3       	in	r24, 0x18	; 24
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	88 bb       	out	0x18, r24	; 24
				SPI_send_char(key);
     d4e:	8c 2f       	mov	r24, r28
     d50:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
				SETBIT(PORTB,4);
     d54:	88 b3       	in	r24, 0x18	; 24
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	88 bb       	out	0x18, r24	; 24
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	81 ee       	ldi	r24, 0xE1	; 225
     d5e:	94 e0       	ldi	r25, 0x04	; 4
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <__stack+0x501>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <__stack+0x50b>
     d6a:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
     d6c:	88 b3       	in	r24, 0x18	; 24
     d6e:	8f 7e       	andi	r24, 0xEF	; 239
     d70:	88 bb       	out	0x18, r24	; 24
				SPI_send_char(button_num);
     d72:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <button_num>
     d76:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
				SETBIT(PORTB,4);
     d7a:	88 b3       	in	r24, 0x18	; 24
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	88 bb       	out	0x18, r24	; 24
				key=-1;
				break;
     d80:	54 c0       	rjmp	.+168    	; 0xe2a <__stack+0x5cb>
				case '2':											//Status OFF
				LCD_write_command(1);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("status:  off ");
     d88:	85 e8       	ldi	r24, 0x85	; 133
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				LCD_write_command(0xc0);
     d90:	80 ec       	ldi	r24, 0xC0	; 192
     d92:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("1>on   3>back");
     d96:	83 e9       	ldi	r24, 0x93	; 147
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				CLRBIT(PORTB,4);
     d9e:	88 b3       	in	r24, 0x18	; 24
     da0:	8f 7e       	andi	r24, 0xEF	; 239
     da2:	88 bb       	out	0x18, r24	; 24
				SPI_send_char(key);
     da4:	8c 2f       	mov	r24, r28
     da6:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
				SETBIT(PORTB,4);
     daa:	88 b3       	in	r24, 0x18	; 24
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	88 bb       	out	0x18, r24	; 24
     db0:	2f ef       	ldi	r18, 0xFF	; 255
     db2:	81 ee       	ldi	r24, 0xE1	; 225
     db4:	94 e0       	ldi	r25, 0x04	; 4
     db6:	21 50       	subi	r18, 0x01	; 1
     db8:	80 40       	sbci	r24, 0x00	; 0
     dba:	90 40       	sbci	r25, 0x00	; 0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <__stack+0x557>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <__stack+0x561>
     dc0:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
     dc2:	88 b3       	in	r24, 0x18	; 24
     dc4:	8f 7e       	andi	r24, 0xEF	; 239
     dc6:	88 bb       	out	0x18, r24	; 24
				SPI_send_char(button_num);
     dc8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <button_num>
     dcc:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
				SETBIT(PORTB,4);
     dd0:	88 b3       	in	r24, 0x18	; 24
     dd2:	80 61       	ori	r24, 0x10	; 16
     dd4:	88 bb       	out	0x18, r24	; 24
				key=-1;
				break;
     dd6:	29 c0       	rjmp	.+82     	; 0xe2a <__stack+0x5cb>
				case '3':											//Return to first Display page
				CLRBIT(PORTB,4);
     dd8:	88 b3       	in	r24, 0x18	; 24
     dda:	8f 7e       	andi	r24, 0xEF	; 239
     ddc:	88 bb       	out	0x18, r24	; 24
				SPI_send_char('0');
     dde:	80 e3       	ldi	r24, 0x30	; 48
     de0:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
				SETBIT(PORTB,4);
     de4:	88 b3       	in	r24, 0x18	; 24
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	88 bb       	out	0x18, r24	; 24
				if(state==0){
     dea:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state>
     dee:	81 11       	cpse	r24, r1
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <__stack+0x59f>
					admin_display();
     df2:	0e 94 cb 02 	call	0x596	; 0x596 <admin_display>
					key=-1;
					count=5;
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     dfc:	16 c0       	rjmp	.+44     	; 0xe2a <__stack+0x5cb>
				}
				else if(state==1){
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	a1 f4       	brne	.+40     	; 0xe2a <__stack+0x5cb>
					guest_display();
     e02:	0e 94 11 03 	call	0x622	; 0x622 <guest_display>
					key=-1;
					count=5;
     e06:	85 e0       	ldi	r24, 0x05	; 5
     e08:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <__stack+0x5cb>
				}
				break;
				default:
				LCD_write_command(1);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("wrong entry");
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
				LCD_write_command(0xc0);
     e1c:	80 ec       	ldi	r24, 0xC0	; 192
     e1e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
     e22:	82 e4       	ldi	r24, 0x42	; 66
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			break;
			
		}
		
	}
}
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <main>:
uint8_t state=0;						 // Admin(0) or guest(1)
uint8_t a1,a2,a3,a4;					 // right password digits --> admin
uint8_t g1,g2,g3,g4;					 //right password digits	--> guest
uint8_t c1,c2,c3,c4;					 // password digits entered by user
int main(void){
	Set_admin_pass=EEPROM_read(24);		 // Must be 255 at the begining
     e2e:	88 e1       	ldi	r24, 0x18	; 24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e36:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Set_admin_pass>
	Set_guest_pass=EEPROM_read(29);		 //	Must be 255 at the begining
     e3a:	8d e1       	ldi	r24, 0x1D	; 29
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e42:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <Set_guest_pass>
	a1=EEPROM_read(20);					 // first digit of admin mode
     e46:	84 e1       	ldi	r24, 0x14	; 20
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e4e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <a1>
	a2=EEPROM_read(21);					 // second digit of admin mode
     e52:	85 e1       	ldi	r24, 0x15	; 21
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e5a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <a2>
	a3=EEPROM_read(22);					 // third digit of admin mode
     e5e:	86 e1       	ldi	r24, 0x16	; 22
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e66:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <a3>
	a4=EEPROM_read(23);	                 // forth digit of admin mode
     e6a:	87 e1       	ldi	r24, 0x17	; 23
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e72:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <a4>
	g1=EEPROM_read(25);					 // first digit of guest mode
     e76:	89 e1       	ldi	r24, 0x19	; 25
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e7e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <g1>
	g2=EEPROM_read(26);					 // second digit of guest mode
     e82:	8a e1       	ldi	r24, 0x1A	; 26
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e8a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <g2>
	g3=EEPROM_read(27);				     // third digit of guest mode
     e8e:	8b e1       	ldi	r24, 0x1B	; 27
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     e96:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g3>
	g4=EEPROM_read(28);					 // forth digit of guest mode
     e9a:	8c e1       	ldi	r24, 0x1C	; 28
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     ea2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <g4>
	SETBIT(DDRC,0);						 // LED FOR ADMIN MODE
     ea6:	84 b3       	in	r24, 0x14	; 20
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,2);						 // LED FOR GUEST MODE
     eac:	84 b3       	in	r24, 0x14	; 20
     eae:	84 60       	ori	r24, 0x04	; 4
     eb0:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,4);						 // LED FOR BLOCK MODE
     eb2:	84 b3       	in	r24, 0x14	; 20
     eb4:	80 61       	ori	r24, 0x10	; 16
     eb6:	84 bb       	out	0x14, r24	; 20
	LCD_init();							 // Initializing LCD
     eb8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_init>
	KPD_init();						 // Initializing Keypad
     ebc:	0e 94 9e 00 	call	0x13c	; 0x13c <KPD_init>
	SPI_master_init();					 // Initializing SPI
     ec0:	0e 94 35 08 	call	0x106a	; 0x106a <SPI_master_init>
	TIMER0_Normal_init();				 // Initializing Timer0 in normal mode
     ec4:	0e 94 3f 08 	call	0x107e	; 0x107e <TIMER0_Normal_init>
	block_mode=EEPROM_read(30);			 // To check if you were in block mode when you restarted your application
     ec8:	8e e1       	ldi	r24, 0x1E	; 30
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_read>
     ed0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <block_mode>
	if(Set_admin_pass==15 && Set_guest_pass==255 ){initial=2;}	//This will let you set Guest password if you didn't with Admin password
     ed4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Set_admin_pass>
     ed8:	8f 30       	cpi	r24, 0x0F	; 15
     eda:	39 f4       	brne	.+14     	; 0xeea <main+0xbc>
     edc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <Set_guest_pass>
     ee0:	8f 3f       	cpi	r24, 0xFF	; 255
     ee2:	19 f4       	brne	.+6      	; 0xeea <main+0xbc>
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <initial>
	while(1)
	{
		
		if(block_mode==3){										//This will block you 20 sec if you are in block mode
     eea:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <block_mode>
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	59 f5       	brne	.+86     	; 0xf48 <main+0x11a>
			SETBIT(PORTC,4);
     ef2:	85 b3       	in	r24, 0x15	; 21
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	85 bb       	out	0x15, r24	; 21
			LCD_write_command(1);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("you are blocked");
     efe:	8f e0       	ldi	r24, 0x0F	; 15
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			LCD_write_command(0xc0);
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("for 20 sec");
     f0c:	8f e1       	ldi	r24, 0x1F	; 31
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     f14:	2f ef       	ldi	r18, 0xFF	; 255
     f16:	87 ea       	ldi	r24, 0xA7	; 167
     f18:	91 e6       	ldi	r25, 0x61	; 97
     f1a:	21 50       	subi	r18, 0x01	; 1
     f1c:	80 40       	sbci	r24, 0x00	; 0
     f1e:	90 40       	sbci	r25, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <main+0xec>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <main+0xf6>
     f24:	00 00       	nop
			_delay_ms(block_timer);
			CLRBIT(PORTC,4);
     f26:	85 b3       	in	r24, 0x15	; 21
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	85 bb       	out	0x15, r24	; 21
			LCD_write_command(1);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Enter right pass");
     f32:	8a e2       	ldi	r24, 0x2A	; 42
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			block_mode=0;
     f3a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <block_mode>
			EEPROM_write(30,0);
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	8e e1       	ldi	r24, 0x1E	; 30
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_write>
		}
		
		
		if (Set_admin_pass==255	&& initial==0 )	 				//To set first value of Admin password
     f48:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Set_admin_pass>
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	09 f0       	breq	.+2      	; 0xf52 <main+0x124>
     f50:	47 c0       	rjmp	.+142    	; 0xfe0 <main+0x1b2>
     f52:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     f56:	81 11       	cpse	r24, r1
     f58:	43 c0       	rjmp	.+134    	; 0xfe0 <main+0x1b2>
		{
			
			LCD_write_command(1);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Welcome to Smart");
     f60:	81 ea       	ldi	r24, 0xA1	; 161
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			LCD_write_command(0xc0);
     f68:	80 ec       	ldi	r24, 0xC0	; 192
     f6a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Home");
     f6e:	82 eb       	ldi	r24, 0xB2	; 178
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	89 e6       	ldi	r24, 0x69	; 105
     f7a:	98 e1       	ldi	r25, 0x18	; 24
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <main+0x14e>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <main+0x158>
     f86:	00 00       	nop
			_delay_ms(500);
			LCD_write_command(1);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Ur first log in");
     f8e:	87 eb       	ldi	r24, 0xB7	; 183
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	85 ea       	ldi	r24, 0xA5	; 165
     f9a:	9e e0       	ldi	r25, 0x0E	; 14
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	80 40       	sbci	r24, 0x00	; 0
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x16e>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x178>
     fa6:	00 00       	nop
			_delay_ms(300);
			LCD_write_command(1);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Enter Admin Pass");
     fae:	87 ec       	ldi	r24, 0xC7	; 199
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			initial=1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <initial>
			count=1;
     fbc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
			state=0;
     fc0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <state>
			start_msg=1;
     fc4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <start_msg>
			Set_admin_pass=15;
     fc8:	8f e0       	ldi	r24, 0x0F	; 15
     fca:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Set_admin_pass>
     fce:	2f ef       	ldi	r18, 0xFF	; 255
     fd0:	83 ec       	ldi	r24, 0xC3	; 195
     fd2:	99 e0       	ldi	r25, 0x09	; 9
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	80 40       	sbci	r24, 0x00	; 0
     fd8:	90 40       	sbci	r25, 0x00	; 0
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <main+0x1a6>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <main+0x1b0>
     fde:	00 00       	nop
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2 )				//To set first value of guest password
     fe0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <Set_guest_pass>
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	f1 f4       	brne	.+60     	; 0x1024 <main+0x1f6>
     fe8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <initial>
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	d1 f4       	brne	.+52     	; 0x1024 <main+0x1f6>
		{
			initial=3;
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <initial>
			LCD_write_command(1);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("Enter Guest pass");
     ffc:	88 ed       	ldi	r24, 0xD8	; 216
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			count=1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <count>
			state=1;
    100a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <state>
			start_msg=1;
    100e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <start_msg>
    1012:	2f ef       	ldi	r18, 0xFF	; 255
    1014:	83 ec       	ldi	r24, 0xC3	; 195
    1016:	99 e0       	ldi	r25, 0x09	; 9
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	80 40       	sbci	r24, 0x00	; 0
    101c:	90 40       	sbci	r25, 0x00	; 0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <main+0x1ea>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <main+0x1f4>
    1022:	00 00       	nop
			_delay_ms(200);
		}
		if(start_msg==0){									//Start message to user before writing password
    1024:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <start_msg>
    1028:	81 11       	cpse	r24, r1
    102a:	1c c0       	rjmp	.+56     	; 0x1064 <main+0x236>
			LCD_write_command(1);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("select Mode: ");
    1032:	89 ee       	ldi	r24, 0xE9	; 233
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			LCD_write_command(0xc0);
    103a:	80 ec       	ldi	r24, 0xC0	; 192
    103c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_command>
			LCD_write_string("0>Admin 1>Guest");
    1040:	87 ef       	ldi	r24, 0xF7	; 247
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_write_string>
			start_msg++;
    1048:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <start_msg>
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <start_msg>
			CLRBIT(PORTB,4);
    1052:	88 b3       	in	r24, 0x18	; 24
    1054:	8f 7e       	andi	r24, 0xEF	; 239
    1056:	88 bb       	out	0x18, r24	; 24
			SPI_send_char('0');
    1058:	80 e3       	ldi	r24, 0x30	; 48
    105a:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_send_char>
			SETBIT(PORTB,4);
    105e:	88 b3       	in	r24, 0x18	; 24
    1060:	80 61       	ori	r24, 0x10	; 16
    1062:	88 bb       	out	0x18, r24	; 24
		}
		get_password();
    1064:	0e 94 3a 03 	call	0x674	; 0x674 <get_password>
		
	}
    1068:	40 cf       	rjmp	.-384    	; 0xeea <main+0xbc>

0000106a <SPI_master_init>:
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
	SPCR = 1<<MSTR | 1<<SPE;
}
void SPI_Slave_init(){
	SETBIT(DDRB,MISO);	// MISO
	SETBIT(SPCR,SPE);	// enable SPI
    106a:	87 b3       	in	r24, 0x17	; 23
    106c:	80 6b       	ori	r24, 0xB0	; 176
    106e:	87 bb       	out	0x17, r24	; 23
    1070:	80 e5       	ldi	r24, 0x50	; 80
    1072:	8d b9       	out	0x0d, r24	; 13
    1074:	08 95       	ret

00001076 <SPI_send_char>:
}
void SPI_send_char(uint8_t data){
	SPDR = data;
    1076:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
    1078:	77 9b       	sbis	0x0e, 7	; 14
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <SPI_send_char+0x2>
}
    107c:	08 95       	ret

0000107e <TIMER0_Normal_init>:
 *  Author: On Store
 */ 
#include "TIMER0_interface.h"

void TIMER0_Normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
    107e:	85 e8       	ldi	r24, 0x85	; 133
    1080:	83 bf       	out	0x33, r24	; 51
	//SETBIT(TIMSK,TOIE0);
	sei();
    1082:	78 94       	sei
    1084:	08 95       	ret

00001086 <__udivmodsi4>:
    1086:	a1 e2       	ldi	r26, 0x21	; 33
    1088:	1a 2e       	mov	r1, r26
    108a:	aa 1b       	sub	r26, r26
    108c:	bb 1b       	sub	r27, r27
    108e:	fd 01       	movw	r30, r26
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <__udivmodsi4_ep>

00001092 <__udivmodsi4_loop>:
    1092:	aa 1f       	adc	r26, r26
    1094:	bb 1f       	adc	r27, r27
    1096:	ee 1f       	adc	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	a2 17       	cp	r26, r18
    109c:	b3 07       	cpc	r27, r19
    109e:	e4 07       	cpc	r30, r20
    10a0:	f5 07       	cpc	r31, r21
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__udivmodsi4_ep>
    10a4:	a2 1b       	sub	r26, r18
    10a6:	b3 0b       	sbc	r27, r19
    10a8:	e4 0b       	sbc	r30, r20
    10aa:	f5 0b       	sbc	r31, r21

000010ac <__udivmodsi4_ep>:
    10ac:	66 1f       	adc	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	1a 94       	dec	r1
    10b6:	69 f7       	brne	.-38     	; 0x1092 <__udivmodsi4_loop>
    10b8:	60 95       	com	r22
    10ba:	70 95       	com	r23
    10bc:	80 95       	com	r24
    10be:	90 95       	com	r25
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	bd 01       	movw	r22, r26
    10c6:	cf 01       	movw	r24, r30
    10c8:	08 95       	ret

000010ca <__tablejump2__>:
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	05 90       	lpm	r0, Z+
    10d0:	f4 91       	lpm	r31, Z
    10d2:	e0 2d       	mov	r30, r0
    10d4:	09 94       	ijmp

000010d6 <_exit>:
    10d6:	f8 94       	cli

000010d8 <__stop_program>:
    10d8:	ff cf       	rjmp	.-2      	; 0x10d8 <__stop_program>
