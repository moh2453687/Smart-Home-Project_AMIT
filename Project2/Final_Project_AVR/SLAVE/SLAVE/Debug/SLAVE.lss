
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000049c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001722  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa6  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  0000332c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d7  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab2  00000000  00000000  00003cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000047a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  74:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Blutooth_u8ReceivedData>:
}

u8 Blutooth_u8ReceivedData(void){
	
	u8 data = 0 ;			/* Initialize a variable to Save the Data Coming From Bluetooth */
	data = USART_u8RecieveByte();		/* Receive the Data Using UART Protocol */
  7c:	0e 94 0e 02 	call	0x41c	; 0x41c <USART_u8RecieveByte>
	
	return data;
  80:	08 95       	ret

00000082 <DIO_vidSetPinMode>:
#include "DIO_config.h"


void DIO_vidSetPinMode(_enuGPIOX enuPortNum, _enuPINX enuPinNum, _enuMODE enuMODE)
{
    switch(enuPortNum)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	01 f1       	breq	.+64     	; 0xc6 <DIO_vidSetPinMode+0x44>
  86:	30 f0       	brcs	.+12     	; 0x94 <DIO_vidSetPinMode+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	b1 f1       	breq	.+108    	; 0xf8 <DIO_vidSetPinMode+0x76>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_vidSetPinMode+0x10>
  90:	4c c0       	rjmp	.+152    	; 0x12a <DIO_vidSetPinMode+0xa8>
  92:	08 95       	ret
    {
        case GPIOA:
            if(enuMODE == OUTPUT)
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <DIO_vidSetPinMode+0x2c>
            {
                SET_BIT(DDRA, enuPinNum);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_vidSetPinMode+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_vidSetPinMode+0x1e>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRA, enuPinNum);
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vidSetPinMode+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vidSetPinMode+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
            }
            break;
        case GPIOB:
            if(enuMODE == OUTPUT)
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	59 f4       	brne	.+22     	; 0xe0 <DIO_vidSetPinMode+0x5e>
            {
                SET_BIT(DDRB, enuPinNum);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_vidSetPinMode+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_vidSetPinMode+0x50>
  da:	82 2b       	or	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRB, enuPinNum);
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vidSetPinMode+0x6a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vidSetPinMode+0x66>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
            }
            break;
        case GPIOC:
            if(enuMODE == OUTPUT)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	59 f4       	brne	.+22     	; 0x112 <DIO_vidSetPinMode+0x90>
            {
                SET_BIT(DDRC, enuPinNum);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_vidSetPinMode+0x86>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_vidSetPinMode+0x82>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRC, enuPinNum);
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vidSetPinMode+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vidSetPinMode+0x98>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
            }
            break;
        case GPIOD:
            if(enuMODE == OUTPUT)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_vidSetPinMode+0xc2>
            {
                SET_BIT(DDRD, enuPinNum);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vidSetPinMode+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vidSetPinMode+0xb4>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret
            }
            else
            {
                CLR_BIT(DDRD, enuPinNum);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vidSetPinMode+0xce>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vidSetPinMode+0xca>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <DIO_vidWritePin>:
    }
}

void DIO_vidWritePin(_enuGPIOX enuPortNum, _enuPINX enuPinNum, _enuOUTPUT enuOUTPUT)
{
    switch(enuPortNum)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	01 f1       	breq	.+64     	; 0x1a0 <DIO_vidWritePin+0x44>
 160:	30 f0       	brcs	.+12     	; 0x16e <DIO_vidWritePin+0x12>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	b1 f1       	breq	.+108    	; 0x1d2 <DIO_vidWritePin+0x76>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f4       	brne	.+2      	; 0x16c <DIO_vidWritePin+0x10>
 16a:	4c c0       	rjmp	.+152    	; 0x204 <DIO_vidWritePin+0xa8>
 16c:	08 95       	ret
    {
        case GPIOA:
            if(enuOUTPUT == HIGH)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	59 f4       	brne	.+22     	; 0x188 <DIO_vidWritePin+0x2c>
            {
                SET_BIT(PORTA, enuPinNum);
 172:	2b b3       	in	r18, 0x1b	; 27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vidWritePin+0x22>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vidWritePin+0x1e>
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTA, enuPinNum);
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vidWritePin+0x38>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vidWritePin+0x34>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	08 95       	ret
            }
            break;
        case GPIOB:
            if(enuOUTPUT == HIGH)
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <DIO_vidWritePin+0x5e>
            {
                SET_BIT(PORTB, enuPinNum);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_vidWritePin+0x54>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_vidWritePin+0x50>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTB, enuPinNum);
 1ba:	28 b3       	in	r18, 0x18	; 24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_vidWritePin+0x6a>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_vidWritePin+0x66>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	08 95       	ret
            }
            break;
        case GPIOC:
            if(enuOUTPUT == HIGH)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <DIO_vidWritePin+0x90>
            {
                SET_BIT(PORTC, enuPinNum);
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vidWritePin+0x86>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vidWritePin+0x82>
 1e6:	82 2b       	or	r24, r18
 1e8:	85 bb       	out	0x15, r24	; 21
 1ea:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTC, enuPinNum);
 1ec:	25 b3       	in	r18, 0x15	; 21
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vidWritePin+0x9c>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vidWritePin+0x98>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
 202:	08 95       	ret
            }
            break;
        case GPIOD:
            if(enuOUTPUT == HIGH)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_vidWritePin+0xc2>
            {
                SET_BIT(PORTD, enuPinNum);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vidWritePin+0xb8>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vidWritePin+0xb4>
 218:	82 2b       	or	r24, r18
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	08 95       	ret
            }
            else
            {
                CLR_BIT(PORTD, enuPinNum);
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vidWritePin+0xce>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vidWritePin+0xca>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	82 bb       	out	0x12, r24	; 18
 234:	08 95       	ret

00000236 <LED_vidLEDInit>:
#include "LED_private.h"
#include "LED_config.h"

void LED_vidLEDInit(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
 23c:	08 95       	ret

0000023e <LED_vidLEDOn>:
}

void LED_vidLEDOn(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidWritePin>
 244:	08 95       	ret

00000246 <LED_vidLEDOff>:
}

void LED_vidLEDOff(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidWritePin>
 24c:	08 95       	ret

0000024e <main>:

volatile u8 data ;
u8 g;
int main(void)
{
	SPI_vidInit();
 24e:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_vidInit>
	LED_vidLEDInit(GPIOC,PIN0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vidLEDInit>
	LED_vidLEDInit(GPIOC,PIN2);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vidLEDInit>
	LED_vidLEDInit(GPIOC,PIN4);
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vidLEDInit>
	LED_vidLEDInit(GPIOC,PIN6);
 26a:	66 e0       	ldi	r22, 0x06	; 6
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vidLEDInit>
	LED_vidLEDInit(GPIOC,PIN7);
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vidLEDInit>
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0x2c>

0000027c <__vector_12>:
    while (1) 
    {
    }
}

ISR(SPI_STC_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	data = SPI_u8SendReceive(Blutooth_u8ReceivedData());
 29e:	0e 94 3e 00 	call	0x7c	; 0x7c <Blutooth_u8ReceivedData>
 2a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_u8SendReceive>
 2a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data>
	switch (data)
 2aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <data>
 2ae:	83 36       	cpi	r24, 0x63	; 99
 2b0:	81 f1       	breq	.+96     	; 0x312 <__vector_12+0x96>
 2b2:	28 f4       	brcc	.+10     	; 0x2be <__vector_12+0x42>
 2b4:	81 36       	cpi	r24, 0x61	; 97
 2b6:	49 f0       	breq	.+18     	; 0x2ca <__vector_12+0x4e>
 2b8:	82 36       	cpi	r24, 0x62	; 98
 2ba:	c9 f0       	breq	.+50     	; 0x2ee <__vector_12+0x72>
 2bc:	5f c0       	rjmp	.+190    	; 0x37c <__vector_12+0x100>
 2be:	86 36       	cpi	r24, 0x66	; 102
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <__vector_12+0x48>
 2c2:	4b c0       	rjmp	.+150    	; 0x35a <__vector_12+0xde>
 2c4:	88 36       	cpi	r24, 0x68	; 104
 2c6:	b9 f1       	breq	.+110    	; 0x336 <__vector_12+0xba>
 2c8:	59 c0       	rjmp	.+178    	; 0x37c <__vector_12+0x100>
	{
	    case 'a':
		LED_vidLEDOn(GPIOC, PIN0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vidLEDOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	89 e6       	ldi	r24, 0x69	; 105
 2d6:	98 e1       	ldi	r25, 0x18	; 24
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <__vector_12+0x5c>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <__vector_12+0x66>
 2e2:	00 00       	nop
		_delay_ms(1000);
		LED_vidLEDOff(GPIOC, PIN0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 23 01 	call	0x246	; 0x246 <LED_vidLEDOff>
		break;
 2ec:	47 c0       	rjmp	.+142    	; 0x37c <__vector_12+0x100>
		case 'b':
		LED_vidLEDOn(GPIOC, PIN2);
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vidLEDOn>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	89 e6       	ldi	r24, 0x69	; 105
 2fa:	98 e1       	ldi	r25, 0x18	; 24
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <__vector_12+0x80>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_12+0x8a>
 306:	00 00       	nop
		_delay_ms(1000);
		LED_vidLEDOff(GPIOC, PIN2);
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 23 01 	call	0x246	; 0x246 <LED_vidLEDOff>
		break;
 310:	35 c0       	rjmp	.+106    	; 0x37c <__vector_12+0x100>
		case 'c':
		LED_vidLEDOn(GPIOC, PIN4);
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vidLEDOn>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	89 e6       	ldi	r24, 0x69	; 105
 31e:	98 e1       	ldi	r25, 0x18	; 24
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <__vector_12+0xa4>
 328:	00 c0       	rjmp	.+0      	; 0x32a <__vector_12+0xae>
 32a:	00 00       	nop
		_delay_ms(1000);
		LED_vidLEDOff(GPIOC, PIN4);
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 23 01 	call	0x246	; 0x246 <LED_vidLEDOff>
		break;
 334:	23 c0       	rjmp	.+70     	; 0x37c <__vector_12+0x100>
		case 'h':
		LED_vidLEDOn(GPIOC, PIN6);
 336:	66 e0       	ldi	r22, 0x06	; 6
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vidLEDOn>
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	89 e6       	ldi	r24, 0x69	; 105
 342:	98 e1       	ldi	r25, 0x18	; 24
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <__vector_12+0xc8>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <__vector_12+0xd2>
 34e:	00 00       	nop
		_delay_ms(1000);
		LED_vidLEDOff(GPIOC, PIN6);
 350:	66 e0       	ldi	r22, 0x06	; 6
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 23 01 	call	0x246	; 0x246 <LED_vidLEDOff>
		break;
 358:	11 c0       	rjmp	.+34     	; 0x37c <__vector_12+0x100>
		case 'f':
		LED_vidLEDOn(GPIOC, PIN7);
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vidLEDOn>
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	89 e6       	ldi	r24, 0x69	; 105
 366:	98 e1       	ldi	r25, 0x18	; 24
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <__vector_12+0xec>
 370:	00 c0       	rjmp	.+0      	; 0x372 <__vector_12+0xf6>
 372:	00 00       	nop
		_delay_ms(1000);
		LED_vidLEDOff(GPIOC, PIN7);
 374:	67 e0       	ldi	r22, 0x07	; 7
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 23 01 	call	0x246	; 0x246 <LED_vidLEDOff>
		break;
	}
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <SPI_vidInit>:

void SPI_vidInit(void)
{
	/* Adjust Mode */
	#if SPI_MODE == MASTER
		SET_BIT(SPCR, MSTR);
 39e:	8d b1       	in	r24, 0x0d	; 13
 3a0:	80 61       	ori	r24, 0x10	; 16
 3a2:	8d b9       	out	0x0d, r24	; 13
		DIO_vidSetPinMode(GPIOB, PIN4, OUTPUT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
		DIO_vidSetPinMode(GPIOB, PIN5, OUTPUT);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	65 e0       	ldi	r22, 0x05	; 5
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
		DIO_vidSetPinMode(GPIOB, PIN7, OUTPUT);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPinMode>
		DIO_vidWritePin(GPIOB, PIN4, HIGH);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidWritePin>
		CLR_BIT(SPCR, MSTR);
		DIO_vidSetPinMode(GPIOB, PIN6, OUTPUT);
	#endif
	/* Adjust Data Order */
	#if SPI_DATAORDER == LSB 
		SET_BIT(SPCR, DORD);
 3cc:	8d b1       	in	r24, 0x0d	; 13
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	8d b9       	out	0x0d, r24	; 13
	#else 
		CLR_BIT(SPCR, DORD);
	#endif
	/* Adjust Operating Level */
	#if SPI_OPERATINGLEVEL == IDEL_LOW
		CLR_BIT(SPCR, CPOL);
 3d2:	8d b1       	in	r24, 0x0d	; 13
 3d4:	87 7f       	andi	r24, 0xF7	; 247
 3d6:	8d b9       	out	0x0d, r24	; 13
	#else 
		SET_BIT(SPCR, CPOL);
	#endif
	/* Adjust Clock Phase */
	#if SPI_CLOCKPHASE == RISING
		CLR_BIT(SPCR, CPHA);
 3d8:	8d b1       	in	r24, 0x0d	; 13
 3da:	8b 7f       	andi	r24, 0xFB	; 251
 3dc:	8d b9       	out	0x0d, r24	; 13
	#else 
		SET_BIT(SPCR, CPHA);
	#endif
	/* Adjust Speed */
	#if SPI_SPEEDMODE == NORMAL_SPEED
		CLR_BIT(SPSR, SPI2X);
 3de:	8e b1       	in	r24, 0x0e	; 14
 3e0:	8e 7f       	andi	r24, 0xFE	; 254
 3e2:	8e b9       	out	0x0e, r24	; 14
		/*Adjust Prescaler */
		#if   SPI_FREQUENCY_PRESCALER == FN_4
			CLR_BIT(SPCR, SPR0);
 3e4:	8d b1       	in	r24, 0x0d	; 13
 3e6:	8e 7f       	andi	r24, 0xFE	; 254
 3e8:	8d b9       	out	0x0d, r24	; 13
			CLR_BIT(SPCR, SPR1);
 3ea:	8d b1       	in	r24, 0x0d	; 13
 3ec:	8d 7f       	andi	r24, 0xFD	; 253
 3ee:	8d b9       	out	0x0d, r24	; 13
 3f0:	08 95       	ret

000003f2 <SPI_u8SendReceive>:
	#endif
		
}

u8 SPI_u8SendReceive(u8 copy_Data)
{
 3f2:	cf 93       	push	r28
 3f4:	c8 2f       	mov	r28, r24
	/* Enable  */
	SET_BIT(SPCR, SPE);
 3f6:	8d b1       	in	r24, 0x0d	; 13
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	8d b9       	out	0x0d, r24	; 13
	DIO_vidWritePin(GPIOB, PIN4, LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidWritePin>
	SPDR = copy_Data;
 406:	cf b9       	out	0x0f, r28	; 15
	while(GET_BIT(SPSR,SPIF)==0);
 408:	77 9b       	sbis	0x0e, 7	; 14
 40a:	fe cf       	rjmp	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	DIO_vidWritePin(GPIOB, PIN4, HIGH);
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	64 e0       	ldi	r22, 0x04	; 4
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_vidWritePin>
	return SPDR;
 416:	8f b1       	in	r24, 0x0f	; 15
}
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <USART_u8RecieveByte>:
	UDR = copy_u8DataSend ;
}

u8 USART_u8RecieveByte(void)
{
	while(GET_BIT(USCRA,RXC)==0);
 41c:	5f 9b       	sbis	0x0b, 7	; 11
 41e:	fe cf       	rjmp	.-4      	; 0x41c <USART_u8RecieveByte>
	return UDR;
 420:	8c b1       	in	r24, 0x0c	; 12
}
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
