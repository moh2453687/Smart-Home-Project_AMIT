
Smart_Home_AVR_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00001b5e  00001bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008001a2  008001a2  00001d34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dc9  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001162  00000000  00000000  00006efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8c  00000000  00000000  0000805f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  00009aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4f  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039d0  00000000  00000000  0000b217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_10>
      2c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <main>
      8a:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vidInit>:
#include "ADC_private.h"

void ADC_vidInit(_enuADCChannels enuChannel)
{
    //1- Make Channel selected I/p
	DIO_vidSetPinMode(GPIOA, enuChannel, INPUT);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	68 2f       	mov	r22, r24
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
		ADCSRA |= 0x04;
	#elif ADC_PRESCALER == 5
		ADCSRA &= 0xF8;
		ADCSRA |= 0x05;
	#elif ADC_PRESCALER == 6
		ADCSRA &= 0xF8;
      9c:	86 b1       	in	r24, 0x06	; 6
      9e:	88 7f       	andi	r24, 0xF8	; 248
      a0:	86 b9       	out	0x06, r24	; 6
		ADCSRA |= 0x06;
      a2:	86 b1       	in	r24, 0x06	; 6
      a4:	86 60       	ori	r24, 0x06	; 6
      a6:	86 b9       	out	0x06, r24	; 6
		ADMUX &= 0x3F;
	#elif ADC_VOLT_REF == 1
		CLR_BIT(ADMUX, REFS1);
		SET_BIT(ADMUX, REFS0);
	#elif ADC_VOLT_REF == 3
		SET_BIT(ADMUX, REFS1);
      a8:	87 b1       	in	r24, 0x07	; 7
      aa:	80 68       	ori	r24, 0x80	; 128
      ac:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX, REFS0);
      ae:	87 b1       	in	r24, 0x07	; 7
      b0:	80 64       	ori	r24, 0x40	; 64
      b2:	87 b9       	out	0x07, r24	; 7
	#endif
	
	//4- Select Type of Storing of the output
	#if ADC_STORE == 0
		CLR_BIT(ADMUX, ADLAR);
      b4:	87 b1       	in	r24, 0x07	; 7
      b6:	8f 7d       	andi	r24, 0xDF	; 223
      b8:	87 b9       	out	0x07, r24	; 7
	#else 
		SET_BIT(ADMUX, ADLAR);
	#endif 
	
	//5- Turn on ADC
	SET_BIT(ADCSRA, ADEN);
      ba:	86 b1       	in	r24, 0x06	; 6
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	86 b9       	out	0x06, r24	; 6
      c0:	08 95       	ret

000000c2 <ADC_u16Read>:

u16 ADC_u16Read(void)
{
    u16 u16ReturnVal;
	//1- Activate Start of Conversion
	SET_BIT(ADCSRA, ADSC);
      c2:	86 b1       	in	r24, 0x06	; 6
      c4:	80 64       	ori	r24, 0x40	; 64
      c6:	86 b9       	out	0x06, r24	; 6
	//2- Wait until conversion Ended
	while(GET_BIT(ADCSRA, ADIF)==0);
      c8:	34 9b       	sbis	0x06, 4	; 6
      ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_u16Read+0x6>
	//3- Clear Interrupt Flag after Ended
	SET_BIT(ADCSRA, ADIF);
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	80 61       	ori	r24, 0x10	; 16
      d0:	86 b9       	out	0x06, r24	; 6
	//4- Read ADCL then ADCH in order
	u16ReturnVal = ADCL;
      d2:	24 b1       	in	r18, 0x04	; 4
	u16ReturnVal |= (ADCH << 8);
      d4:	85 b1       	in	r24, 0x05	; 5
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	98 2f       	mov	r25, r24
      da:	88 27       	eor	r24, r24
	return u16ReturnVal;
      dc:	82 2b       	or	r24, r18
      de:	08 95       	ret

000000e0 <BUZZER_vidLEDInit>:
#include "BUZZER_interface.h"


void BUZZER_vidLEDInit(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
	DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
      e6:	08 95       	ret

000000e8 <BUZZER_vidLEDOn>:
}

void BUZZER_vidLEDOn(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
	DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
      e8:	41 e0       	ldi	r20, 0x01	; 1
      ea:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
      ee:	08 95       	ret

000000f0 <BUZZER_vidLEDOff>:
}

void BUZZER_vidLEDOff(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
	DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
      f6:	08 95       	ret

000000f8 <DC_vidInit>:
#include "DC_interface.h"
#include "DC_config.h"
#include "DC_private.h"

void DC_vidInit(_enuGPIOX enuPIN2Port, _enuPINX enuPinNum)
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	c8 2f       	mov	r28, r24
      fe:	d6 2f       	mov	r29, r22
    TMR0_voidInit();
     100:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TMR0_voidInit>
    DIO_vidSetPinMode(enuPIN2Port, enuPinNum, OUTPUT);
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	6d 2f       	mov	r22, r29
     108:	8c 2f       	mov	r24, r28
     10a:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
}
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <DC_vidStart>:

void DC_vidStart(_enuGPIOX enuPIN2Port, _enuPINX enuPinNum,u8 u8dutycycle)
{
     114:	cf 93       	push	r28
     116:	c4 2f       	mov	r28, r20
    DIO_vidWritePin(enuPIN2Port, enuPinNum, LOW);
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
    TMR0_GenerateFastPWM(u8dutycycle);
     11e:	8c 2f       	mov	r24, r28
     120:	0e 94 a3 09 	call	0x1346	; 0x1346 <TMR0_GenerateFastPWM>
    TMR0_voidStart(TMR0_CLK_8);
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 98 09 	call	0x1330	; 0x1330 <TMR0_voidStart>
}
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <DIO_vidSetPinMode>:
            break;
        case GPIOC:
            PORTC = u8OutputValue;
            break;
        case GPIOD:
            PORTD = u8OutputValue;
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	01 f1       	breq	.+64     	; 0x172 <DIO_vidSetPinMode+0x44>
     132:	30 f0       	brcs	.+12     	; 0x140 <DIO_vidSetPinMode+0x12>
     134:	82 30       	cpi	r24, 0x02	; 2
     136:	b1 f1       	breq	.+108    	; 0x1a4 <DIO_vidSetPinMode+0x76>
     138:	83 30       	cpi	r24, 0x03	; 3
     13a:	09 f4       	brne	.+2      	; 0x13e <DIO_vidSetPinMode+0x10>
     13c:	4c c0       	rjmp	.+152    	; 0x1d6 <DIO_vidSetPinMode+0xa8>
     13e:	08 95       	ret
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	59 f4       	brne	.+22     	; 0x15a <DIO_vidSetPinMode+0x2c>
     144:	2a b3       	in	r18, 0x1a	; 26
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vidSetPinMode+0x22>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vidSetPinMode+0x1e>
     154:	82 2b       	or	r24, r18
     156:	8a bb       	out	0x1a, r24	; 26
     158:	08 95       	ret
     15a:	2a b3       	in	r18, 0x1a	; 26
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vidSetPinMode+0x38>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vidSetPinMode+0x34>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	8a bb       	out	0x1a, r24	; 26
     170:	08 95       	ret
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	59 f4       	brne	.+22     	; 0x18c <DIO_vidSetPinMode+0x5e>
     176:	27 b3       	in	r18, 0x17	; 23
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vidSetPinMode+0x54>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	6a 95       	dec	r22
     184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vidSetPinMode+0x50>
     186:	82 2b       	or	r24, r18
     188:	87 bb       	out	0x17, r24	; 23
     18a:	08 95       	ret
     18c:	27 b3       	in	r18, 0x17	; 23
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vidSetPinMode+0x6a>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	6a 95       	dec	r22
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vidSetPinMode+0x66>
     19c:	80 95       	com	r24
     19e:	82 23       	and	r24, r18
     1a0:	87 bb       	out	0x17, r24	; 23
     1a2:	08 95       	ret
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_vidSetPinMode+0x90>
     1a8:	24 b3       	in	r18, 0x14	; 20
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vidSetPinMode+0x86>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vidSetPinMode+0x82>
     1b8:	82 2b       	or	r24, r18
     1ba:	84 bb       	out	0x14, r24	; 20
     1bc:	08 95       	ret
     1be:	24 b3       	in	r18, 0x14	; 20
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vidSetPinMode+0x9c>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vidSetPinMode+0x98>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	84 bb       	out	0x14, r24	; 20
     1d4:	08 95       	ret
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_vidSetPinMode+0xc2>
     1da:	21 b3       	in	r18, 0x11	; 17
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vidSetPinMode+0xb8>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vidSetPinMode+0xb4>
     1ea:	82 2b       	or	r24, r18
     1ec:	81 bb       	out	0x11, r24	; 17
     1ee:	08 95       	ret
     1f0:	21 b3       	in	r18, 0x11	; 17
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_vidSetPinMode+0xce>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_vidSetPinMode+0xca>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	81 bb       	out	0x11, r24	; 17
     206:	08 95       	ret

00000208 <DIO_vidWritePin>:
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	01 f1       	breq	.+64     	; 0x24c <DIO_vidWritePin+0x44>
     20c:	30 f0       	brcs	.+12     	; 0x21a <DIO_vidWritePin+0x12>
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	b1 f1       	breq	.+108    	; 0x27e <DIO_vidWritePin+0x76>
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	09 f4       	brne	.+2      	; 0x218 <DIO_vidWritePin+0x10>
     216:	4c c0       	rjmp	.+152    	; 0x2b0 <DIO_vidWritePin+0xa8>
     218:	08 95       	ret
     21a:	41 30       	cpi	r20, 0x01	; 1
     21c:	59 f4       	brne	.+22     	; 0x234 <DIO_vidWritePin+0x2c>
     21e:	2b b3       	in	r18, 0x1b	; 27
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vidWritePin+0x22>
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vidWritePin+0x1e>
     22e:	82 2b       	or	r24, r18
     230:	8b bb       	out	0x1b, r24	; 27
     232:	08 95       	ret
     234:	2b b3       	in	r18, 0x1b	; 27
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vidWritePin+0x38>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	6a 95       	dec	r22
     242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vidWritePin+0x34>
     244:	80 95       	com	r24
     246:	82 23       	and	r24, r18
     248:	8b bb       	out	0x1b, r24	; 27
     24a:	08 95       	ret
     24c:	41 30       	cpi	r20, 0x01	; 1
     24e:	59 f4       	brne	.+22     	; 0x266 <DIO_vidWritePin+0x5e>
     250:	28 b3       	in	r18, 0x18	; 24
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vidWritePin+0x54>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vidWritePin+0x50>
     260:	82 2b       	or	r24, r18
     262:	88 bb       	out	0x18, r24	; 24
     264:	08 95       	ret
     266:	28 b3       	in	r18, 0x18	; 24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vidWritePin+0x6a>
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	6a 95       	dec	r22
     274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vidWritePin+0x66>
     276:	80 95       	com	r24
     278:	82 23       	and	r24, r18
     27a:	88 bb       	out	0x18, r24	; 24
     27c:	08 95       	ret
     27e:	41 30       	cpi	r20, 0x01	; 1
     280:	59 f4       	brne	.+22     	; 0x298 <DIO_vidWritePin+0x90>
     282:	25 b3       	in	r18, 0x15	; 21
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vidWritePin+0x86>
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vidWritePin+0x82>
     292:	82 2b       	or	r24, r18
     294:	85 bb       	out	0x15, r24	; 21
     296:	08 95       	ret
     298:	25 b3       	in	r18, 0x15	; 21
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vidWritePin+0x9c>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vidWritePin+0x98>
     2a8:	80 95       	com	r24
     2aa:	82 23       	and	r24, r18
     2ac:	85 bb       	out	0x15, r24	; 21
     2ae:	08 95       	ret
     2b0:	41 30       	cpi	r20, 0x01	; 1
     2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_vidWritePin+0xc2>
     2b4:	22 b3       	in	r18, 0x12	; 18
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_vidWritePin+0xb8>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_vidWritePin+0xb4>
     2c4:	82 2b       	or	r24, r18
     2c6:	82 bb       	out	0x12, r24	; 18
     2c8:	08 95       	ret
     2ca:	22 b3       	in	r18, 0x12	; 18
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vidWritePin+0xce>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	6a 95       	dec	r22
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vidWritePin+0xca>
     2da:	80 95       	com	r24
     2dc:	82 23       	and	r24, r18
     2de:	82 bb       	out	0x12, r24	; 18
     2e0:	08 95       	ret

000002e2 <DIO_enuReadPin>:
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	e1 f0       	breq	.+56     	; 0x31e <DIO_enuReadPin+0x3c>
     2e6:	30 f0       	brcs	.+12     	; 0x2f4 <DIO_enuReadPin+0x12>
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	71 f1       	breq	.+92     	; 0x348 <DIO_enuReadPin+0x66>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <DIO_enuReadPin+0x10>
     2f0:	40 c0       	rjmp	.+128    	; 0x372 <DIO_enuReadPin+0x90>
     2f2:	53 c0       	rjmp	.+166    	; 0x39a <DIO_enuReadPin+0xb8>
     2f4:	49 b3       	in	r20, 0x19	; 25
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9c 01       	movw	r18, r24
     2fc:	06 2e       	mov	r0, r22
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_enuReadPin+0x22>
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_enuReadPin+0x1e>
     308:	84 2f       	mov	r24, r20
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	82 23       	and	r24, r18
     30e:	93 23       	and	r25, r19
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_enuReadPin+0x34>
     312:	95 95       	asr	r25
     314:	87 95       	ror	r24
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_enuReadPin+0x30>
     31a:	98 2f       	mov	r25, r24
     31c:	3e c0       	rjmp	.+124    	; 0x39a <DIO_enuReadPin+0xb8>
     31e:	46 b3       	in	r20, 0x16	; 22
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9c 01       	movw	r18, r24
     326:	06 2e       	mov	r0, r22
     328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_enuReadPin+0x4c>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_enuReadPin+0x48>
     332:	84 2f       	mov	r24, r20
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	82 23       	and	r24, r18
     338:	93 23       	and	r25, r19
     33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_enuReadPin+0x5e>
     33c:	95 95       	asr	r25
     33e:	87 95       	ror	r24
     340:	6a 95       	dec	r22
     342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_enuReadPin+0x5a>
     344:	98 2f       	mov	r25, r24
     346:	29 c0       	rjmp	.+82     	; 0x39a <DIO_enuReadPin+0xb8>
     348:	43 b3       	in	r20, 0x13	; 19
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9c 01       	movw	r18, r24
     350:	06 2e       	mov	r0, r22
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_enuReadPin+0x76>
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_enuReadPin+0x72>
     35c:	84 2f       	mov	r24, r20
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	82 23       	and	r24, r18
     362:	93 23       	and	r25, r19
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_enuReadPin+0x88>
     366:	95 95       	asr	r25
     368:	87 95       	ror	r24
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_enuReadPin+0x84>
     36e:	98 2f       	mov	r25, r24
     370:	14 c0       	rjmp	.+40     	; 0x39a <DIO_enuReadPin+0xb8>
     372:	40 b3       	in	r20, 0x10	; 16
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9c 01       	movw	r18, r24
     37a:	06 2e       	mov	r0, r22
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_enuReadPin+0xa0>
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_enuReadPin+0x9c>
     386:	84 2f       	mov	r24, r20
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	82 23       	and	r24, r18
     38c:	93 23       	and	r25, r19
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_enuReadPin+0xb2>
     390:	95 95       	asr	r25
     392:	87 95       	ror	r24
     394:	6a 95       	dec	r22
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_enuReadPin+0xae>
     398:	98 2f       	mov	r25, r24
     39a:	89 2f       	mov	r24, r25
     39c:	08 95       	ret

0000039e <DIO_vidSetLowNibbleMode>:
    }
}


void DIO_vidSetLowNibbleMode(_enuGPIOX enuPortNum, _enuMODE enuMODE)
{
     39e:	cf 93       	push	r28
     3a0:	c8 2f       	mov	r28, r24
    if(enuMODE == OUTPUT)
     3a2:	61 30       	cpi	r22, 0x01	; 1
     3a4:	a1 f4       	brne	.+40     	; 0x3ce <DIO_vidSetLowNibbleMode+0x30>
    {
        DIO_vidSetPinMode(enuPortNum, PIN0, OUTPUT);
     3a6:	41 e0       	ldi	r20, 0x01	; 1
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN1, OUTPUT);
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	8c 2f       	mov	r24, r28
     3b4:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN2, OUTPUT);
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	8c 2f       	mov	r24, r28
     3be:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN3, OUTPUT);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	63 e0       	ldi	r22, 0x03	; 3
     3c6:	8c 2f       	mov	r24, r28
     3c8:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
     3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <DIO_vidSetLowNibbleMode+0x56>
    }
    else
    {
        DIO_vidSetPinMode(enuPortNum, PIN0, INPUT);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN1, INPUT);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	8c 2f       	mov	r24, r28
     3dc:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN2, INPUT);
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	62 e0       	ldi	r22, 0x02	; 2
     3e4:	8c 2f       	mov	r24, r28
     3e6:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN3, INPUT);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	63 e0       	ldi	r22, 0x03	; 3
     3ee:	8c 2f       	mov	r24, r28
     3f0:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
    }
}
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <DIO_vidSetHighNibbleMode>:

void DIO_vidSetHighNibbleMode(_enuGPIOX enuPortNum, _enuMODE enuMODE)
{
     3f8:	cf 93       	push	r28
     3fa:	c8 2f       	mov	r28, r24
    if(enuMODE == OUTPUT)
     3fc:	61 30       	cpi	r22, 0x01	; 1
     3fe:	a1 f4       	brne	.+40     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    {
        DIO_vidSetPinMode(enuPortNum, PIN4, OUTPUT);
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	64 e0       	ldi	r22, 0x04	; 4
     404:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN5, OUTPUT);
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	65 e0       	ldi	r22, 0x05	; 5
     40c:	8c 2f       	mov	r24, r28
     40e:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN6, OUTPUT);
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	66 e0       	ldi	r22, 0x06	; 6
     416:	8c 2f       	mov	r24, r28
     418:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN7, OUTPUT);
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	8c 2f       	mov	r24, r28
     422:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
     426:	13 c0       	rjmp	.+38     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
    }
    else
    {
        DIO_vidSetPinMode(enuPortNum, PIN4, INPUT);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN5, INPUT);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	8c 2f       	mov	r24, r28
     436:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN6, INPUT);
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	66 e0       	ldi	r22, 0x06	; 6
     43e:	8c 2f       	mov	r24, r28
     440:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN7, INPUT);
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	67 e0       	ldi	r22, 0x07	; 7
     448:	8c 2f       	mov	r24, r28
     44a:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
    }
}
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <DIO_vidWriteLowNibble>:

void DIO_vidWriteLowNibble(_enuGPIOX enuPortNum, u8 u8OutputValue)
{
    u8OutputValue &= 0x0f;
     452:	6f 70       	andi	r22, 0x0F	; 15
    switch(enuPortNum)
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	69 f0       	breq	.+26     	; 0x472 <DIO_vidWriteLowNibble+0x20>
     458:	28 f0       	brcs	.+10     	; 0x464 <DIO_vidWriteLowNibble+0x12>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	89 f0       	breq	.+34     	; 0x480 <DIO_vidWriteLowNibble+0x2e>
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	b1 f0       	breq	.+44     	; 0x48e <DIO_vidWriteLowNibble+0x3c>
     462:	08 95       	ret
    {
        case GPIOA:
            PORTA &= 0xf0;
     464:	8b b3       	in	r24, 0x1b	; 27
     466:	80 7f       	andi	r24, 0xF0	; 240
     468:	8b bb       	out	0x1b, r24	; 27
            PORTA |= u8OutputValue;
     46a:	8b b3       	in	r24, 0x1b	; 27
     46c:	68 2b       	or	r22, r24
     46e:	6b bb       	out	0x1b, r22	; 27
            break;
     470:	08 95       	ret
        case GPIOB:
            PORTB &= 0xf0;
     472:	88 b3       	in	r24, 0x18	; 24
     474:	80 7f       	andi	r24, 0xF0	; 240
     476:	88 bb       	out	0x18, r24	; 24
            PORTB |= u8OutputValue;
     478:	88 b3       	in	r24, 0x18	; 24
     47a:	68 2b       	or	r22, r24
     47c:	68 bb       	out	0x18, r22	; 24
            break;
     47e:	08 95       	ret
        case GPIOC:
            PORTC &= 0xf0;
     480:	85 b3       	in	r24, 0x15	; 21
     482:	80 7f       	andi	r24, 0xF0	; 240
     484:	85 bb       	out	0x15, r24	; 21
            PORTC |= u8OutputValue;
     486:	85 b3       	in	r24, 0x15	; 21
     488:	68 2b       	or	r22, r24
     48a:	65 bb       	out	0x15, r22	; 21
            break;
     48c:	08 95       	ret
        case GPIOD:
            PORTD &= 0xf0;
     48e:	82 b3       	in	r24, 0x12	; 18
     490:	80 7f       	andi	r24, 0xF0	; 240
     492:	82 bb       	out	0x12, r24	; 18
            PORTD |= u8OutputValue;
     494:	82 b3       	in	r24, 0x12	; 18
     496:	68 2b       	or	r22, r24
     498:	62 bb       	out	0x12, r22	; 18
     49a:	08 95       	ret

0000049c <DIO_vidWriteHighNibble>:
    }
}

void DIO_vidWriteHighNibble(_enuGPIOX enuPortNum, u8 u8OutputValue)
{
    u8OutputValue &= 0xf0;
     49c:	60 7f       	andi	r22, 0xF0	; 240
    switch(enuPortNum)
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	69 f0       	breq	.+26     	; 0x4bc <DIO_vidWriteHighNibble+0x20>
     4a2:	28 f0       	brcs	.+10     	; 0x4ae <DIO_vidWriteHighNibble+0x12>
     4a4:	82 30       	cpi	r24, 0x02	; 2
     4a6:	89 f0       	breq	.+34     	; 0x4ca <DIO_vidWriteHighNibble+0x2e>
     4a8:	83 30       	cpi	r24, 0x03	; 3
     4aa:	b1 f0       	breq	.+44     	; 0x4d8 <DIO_vidWriteHighNibble+0x3c>
     4ac:	08 95       	ret
    {
        case GPIOA:
            PORTA &= 0x0f;
     4ae:	8b b3       	in	r24, 0x1b	; 27
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	8b bb       	out	0x1b, r24	; 27
            PORTA |= u8OutputValue;
     4b4:	8b b3       	in	r24, 0x1b	; 27
     4b6:	68 2b       	or	r22, r24
     4b8:	6b bb       	out	0x1b, r22	; 27
            break;
     4ba:	08 95       	ret
        case GPIOB:
            PORTB &= 0x0f;
     4bc:	88 b3       	in	r24, 0x18	; 24
     4be:	8f 70       	andi	r24, 0x0F	; 15
     4c0:	88 bb       	out	0x18, r24	; 24
            PORTB |= u8OutputValue;
     4c2:	88 b3       	in	r24, 0x18	; 24
     4c4:	68 2b       	or	r22, r24
     4c6:	68 bb       	out	0x18, r22	; 24
            break;
     4c8:	08 95       	ret
        case GPIOC:
            PORTC &= 0x0f;
     4ca:	85 b3       	in	r24, 0x15	; 21
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	85 bb       	out	0x15, r24	; 21
            PORTC |= u8OutputValue;
     4d0:	85 b3       	in	r24, 0x15	; 21
     4d2:	68 2b       	or	r22, r24
     4d4:	65 bb       	out	0x15, r22	; 21
            break;
     4d6:	08 95       	ret
        case GPIOD:
            PORTD &= 0x0f;
     4d8:	82 b3       	in	r24, 0x12	; 18
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	82 bb       	out	0x12, r24	; 18
            PORTD |= u8OutputValue;
     4de:	82 b3       	in	r24, 0x12	; 18
     4e0:	68 2b       	or	r22, r24
     4e2:	62 bb       	out	0x12, r22	; 18
     4e4:	08 95       	ret

000004e6 <EEPROM_voidWrite>:
#include "EEPROM_private.h"


void EEPROM_voidWrite(u16 u16Address, u8 u8Data)
{
	EEARL = (u8)u16Address;
     4e6:	8e bb       	out	0x1e, r24	; 30
	EEARH = (u8)(u16Address >> 8);
     4e8:	9f bb       	out	0x1f, r25	; 31
	EEDR  =  u8Data;
     4ea:	6d bb       	out	0x1d, r22	; 29
	EECR = 0x04;
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	8c bb       	out	0x1c, r24	; 28
	EECR |= 0x02;
     4f0:	8c b3       	in	r24, 0x1c	; 28
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	8c bb       	out	0x1c, r24	; 28
	while(GET_BIT(EECR, EEWE)==1);
     4f6:	e1 99       	sbic	0x1c, 1	; 28
     4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <EEPROM_voidWrite+0x10>
}
     4fa:	08 95       	ret

000004fc <EEPROM_voidRead>:

u8 EEPROM_voidRead(u16 u16Address)
{
	EEARL = (u8)u16Address;
     4fc:	8e bb       	out	0x1e, r24	; 30
	EEARH = (u8)(u16Address >> 8);
     4fe:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR, EERE);
     500:	8c b3       	in	r24, 0x1c	; 28
     502:	81 60       	ori	r24, 0x01	; 1
     504:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
     506:	8d b3       	in	r24, 0x1d	; 29
     508:	08 95       	ret

0000050a <KPD_vidInit>:
#include "KPD_config.h"
#include "KPD_private.h"


void KPD_vidInit(_enuGPIOX enuPortNum, _enuNIBBLE enuOutNibble, _enuNIBBLE enuInNibble)
{
     50a:	cf 93       	push	r28
     50c:	c8 2f       	mov	r28, r24
    if (enuOutNibble == LOW_NIBBLE)
     50e:	61 11       	cpse	r22, r1
     510:	0c c0       	rjmp	.+24     	; 0x52a <KPD_vidInit+0x20>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT);
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	8c 2f       	mov	r24, r28
     51c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vidSetHighNibbleMode>
        DIO_vidWriteHighNibble(enuPortNum, 0xF0);
     520:	60 ef       	ldi	r22, 0xF0	; 240
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
     528:	0b c0       	rjmp	.+22     	; 0x540 <KPD_vidInit+0x36>
    }
    else
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT);
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	8c 2f       	mov	r24, r28
     534:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F);
     538:	6f e0       	ldi	r22, 0x0F	; 15
     53a:	8c 2f       	mov	r24, r28
     53c:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
    }
    
}
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(_enuGPIOX enuPortNum, _enuNIBBLE enuOutNibble, _enuNIBBLE enuInNibble)
{
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	60 97       	sbiw	r28, 0x10	; 16
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	f8 2e       	mov	r15, r24
    u8 arr[4][4]={{'A','0','=','+'},
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	e1 e6       	ldi	r30, 0x61	; 97
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	de 01       	movw	r26, r28
     56c:	11 96       	adiw	r26, 0x01	; 1
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	8a 95       	dec	r24
     574:	e1 f7       	brne	.-8      	; 0x56e <KPD_u8GetPressedKey+0x2a>
                  {'4','5','6','*'},
                  {'7','8','9','/'}};
	u8 u8Row , u8Coloumn ;
    _enuOUTPUT enuReadValue;
	u8 Return_val= NOT_PRESSRD;
    if (enuOutNibble == LOW_NIBBLE)
     576:	66 23       	and	r22, r22
     578:	71 f1       	breq	.+92     	; 0x5d6 <KPD_u8GetPressedKey+0x92>
     57a:	dd 24       	eor	r13, r13
     57c:	da 94       	dec	r13
     57e:	e1 2c       	mov	r14, r1
     580:	5a c0       	rjmp	.+180    	; 0x636 <KPD_u8GetPressedKey+0xf2>
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
     582:	6f e0       	ldi	r22, 0x0F	; 15
     584:	8f 2d       	mov	r24, r15
     586:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, u8Row, LOW);
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	6e 2d       	mov	r22, r14
     58e:	8f 2d       	mov	r24, r15
     590:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	19 c0       	rjmp	.+50     	; 0x5ca <KPD_u8GetPressedKey+0x86>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum,(u8Coloumn+4));
     598:	64 e0       	ldi	r22, 0x04	; 4
     59a:	60 0f       	add	r22, r16
     59c:	8f 2d       	mov	r24, r15
     59e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_enuReadPin>
     5a2:	18 2f       	mov	r17, r24
                if (enuReadValue == LOW)
     5a4:	81 11       	cpse	r24, r1
     5a6:	10 c0       	rjmp	.+32     	; 0x5c8 <KPD_u8GetPressedKey+0x84>
                {
                    Return_val = arr[u8Row][u8Coloumn];
     5a8:	ee 2d       	mov	r30, r14
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	8c 0f       	add	r24, r28
     5ba:	9d 1f       	adc	r25, r29
     5bc:	e8 0f       	add	r30, r24
     5be:	f9 1f       	adc	r31, r25
     5c0:	e0 0f       	add	r30, r16
     5c2:	f1 1d       	adc	r31, r1
     5c4:	d0 80       	ld	r13, Z
                    break;
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <KPD_u8GetPressedKey+0x8a>
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, u8Row, LOW);
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	04 30       	cpi	r16, 0x04	; 4
     5cc:	28 f3       	brcs	.-54     	; 0x598 <KPD_u8GetPressedKey+0x54>
                    Return_val = arr[u8Row][u8Coloumn];
                    break;
                }
                
            }
            if (enuReadValue == LOW)
     5ce:	11 23       	and	r17, r17
     5d0:	a9 f1       	breq	.+106    	; 0x63c <KPD_u8GetPressedKey+0xf8>
	u8 u8Row , u8Coloumn ;
    _enuOUTPUT enuReadValue;
	u8 Return_val= NOT_PRESSRD;
    if (enuOutNibble == LOW_NIBBLE)
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
     5d2:	e3 94       	inc	r14
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <KPD_u8GetPressedKey+0x98>
     5d6:	dd 24       	eor	r13, r13
     5d8:	da 94       	dec	r13
     5da:	e1 2c       	mov	r14, r1
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	9e 15       	cp	r25, r14
     5e0:	80 f6       	brcc	.-96     	; 0x582 <KPD_u8GetPressedKey+0x3e>
     5e2:	2c c0       	rjmp	.+88     	; 0x63c <KPD_u8GetPressedKey+0xf8>
    }
    else
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
     5e4:	60 ef       	ldi	r22, 0xF0	; 240
     5e6:	8f 2d       	mov	r24, r15
     5e8:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Row+4), LOW);
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	64 e0       	ldi	r22, 0x04	; 4
     5f0:	6e 0d       	add	r22, r14
     5f2:	8f 2d       	mov	r24, r15
     5f4:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	18 c0       	rjmp	.+48     	; 0x62c <KPD_u8GetPressedKey+0xe8>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum,(u8Coloumn));
     5fc:	60 2f       	mov	r22, r16
     5fe:	8f 2d       	mov	r24, r15
     600:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_enuReadPin>
     604:	18 2f       	mov	r17, r24
                if (enuReadValue == LOW)
     606:	81 11       	cpse	r24, r1
     608:	10 c0       	rjmp	.+32     	; 0x62a <KPD_u8GetPressedKey+0xe6>
                {
                    Return_val = arr[u8Row][u8Coloumn];
     60a:	ee 2d       	mov	r30, r14
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	8c 0f       	add	r24, r28
     61c:	9d 1f       	adc	r25, r29
     61e:	e8 0f       	add	r30, r24
     620:	f9 1f       	adc	r31, r25
     622:	e0 0f       	add	r30, r16
     624:	f1 1d       	adc	r31, r1
     626:	d0 80       	ld	r13, Z
                    break;
     628:	03 c0       	rjmp	.+6      	; 0x630 <KPD_u8GetPressedKey+0xec>
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Row+4), LOW);
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	04 30       	cpi	r16, 0x04	; 4
     62e:	30 f3       	brcs	.-52     	; 0x5fc <KPD_u8GetPressedKey+0xb8>
                    Return_val = arr[u8Row][u8Coloumn];
                    break;
                }
                
            }
            if (enuReadValue == LOW)
     630:	11 23       	and	r17, r17
     632:	21 f0       	breq	.+8      	; 0x63c <KPD_u8GetPressedKey+0xf8>
            }  
        }
    }
    else
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
     634:	e3 94       	inc	r14
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	9e 15       	cp	r25, r14
     63a:	a0 f6       	brcc	.-88     	; 0x5e4 <KPD_u8GetPressedKey+0xa0>
            }  
        } 
    }
    return Return_val;
    
     63c:	8d 2d       	mov	r24, r13
     63e:	60 96       	adiw	r28, 0x10	; 16
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	08 95       	ret

0000065a <LCD_vidSendEnablePulse>:
	u16 tmpint1 = (u16)tmpval;
	float tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
	LCD_vidDisplayString(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, str);
}
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	c8 2f       	mov	r28, r24
     660:	d6 2f       	mov	r29, r22
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
     668:	8f e9       	ldi	r24, 0x9F	; 159
     66a:	9f e0       	ldi	r25, 0x0F	; 15
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_vidSendEnablePulse+0x12>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_vidSendEnablePulse+0x18>
     672:	00 00       	nop
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	6d 2f       	mov	r22, r29
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <LCD_vidSendCmd4bit>:
		_delay_ms(1);
	}
}

void LCD_vidSendCmd4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 u8Cmd)
{
     684:	cf 92       	push	r12
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	f8 2e       	mov	r15, r24
     694:	d6 2f       	mov	r29, r22
     696:	14 2f       	mov	r17, r20
     698:	c2 2f       	mov	r28, r18
	if(enuNibble == LOW_NIBBLE)
     69a:	e1 10       	cpse	r14, r1
     69c:	22 c0       	rjmp	.+68     	; 0x6e2 <LCD_vidSendCmd4bit+0x5e>
	{
		DIO_vidWriteLowNibble(enuDataPortNum, u8Cmd>>4);
     69e:	6c 2d       	mov	r22, r12
     6a0:	62 95       	swap	r22
     6a2:	6f 70       	andi	r22, 0x0F	; 15
     6a4:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	61 2f       	mov	r22, r17
     6ac:	8d 2f       	mov	r24, r29
     6ae:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     6b2:	60 2f       	mov	r22, r16
     6b4:	8c 2f       	mov	r24, r28
     6b6:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
		DIO_vidWriteLowNibble(enuDataPortNum, u8Cmd);
     6ba:	6c 2d       	mov	r22, r12
     6bc:	8f 2d       	mov	r24, r15
     6be:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	61 2f       	mov	r22, r17
     6c6:	8d 2f       	mov	r24, r29
     6c8:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     6cc:	60 2f       	mov	r22, r16
     6ce:	8c 2f       	mov	r24, r28
     6d0:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	8f e9       	ldi	r24, 0x9F	; 159
     6d6:	9f e0       	ldi	r25, 0x0F	; 15
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <LCD_vidSendCmd4bit+0x54>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <LCD_vidSendCmd4bit+0x5a>
     6de:	00 00       	nop
     6e0:	21 c0       	rjmp	.+66     	; 0x724 <LCD_vidSendCmd4bit+0xa0>
		_delay_ms(2);
	}
	else
	{
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd);
     6e2:	6c 2d       	mov	r22, r12
     6e4:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	61 2f       	mov	r22, r17
     6ec:	8d 2f       	mov	r24, r29
     6ee:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     6f2:	60 2f       	mov	r22, r16
     6f4:	8c 2f       	mov	r24, r28
     6f6:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd<<4);
     6fa:	6c 2d       	mov	r22, r12
     6fc:	62 95       	swap	r22
     6fe:	60 7f       	andi	r22, 0xF0	; 240
     700:	8f 2d       	mov	r24, r15
     702:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	61 2f       	mov	r22, r17
     70a:	8d 2f       	mov	r24, r29
     70c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     710:	60 2f       	mov	r22, r16
     712:	8c 2f       	mov	r24, r28
     714:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
     718:	8f e9       	ldi	r24, 0x9F	; 159
     71a:	9f e0       	ldi	r25, 0x0F	; 15
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_vidSendCmd4bit+0x98>
     720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_vidSendCmd4bit+0x9e>
     722:	00 00       	nop
		_delay_ms(2);
	}
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	cf 90       	pop	r12
     732:	08 95       	ret

00000734 <LCD_vidInit4bit>:
	LCD_vidDisplayString(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, str);
}


void LCD_vidInit4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum, _enuNIBBLE enuNibble)
{
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	c8 2f       	mov	r28, r24
     746:	d6 2f       	mov	r29, r22
     748:	14 2f       	mov	r17, r20
     74a:	f2 2e       	mov	r15, r18
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	81 ee       	ldi	r24, 0xE1	; 225
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	21 50       	subi	r18, 0x01	; 1
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	90 40       	sbci	r25, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <LCD_vidInit4bit+0x1e>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <LCD_vidInit4bit+0x28>
     75c:	00 00       	nop
	_delay_ms(200);
	DIO_vidSetPinMode(enuRSPortNum, enuRSPinNum, OUTPUT);    
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	61 2f       	mov	r22, r17
     762:	8d 2f       	mov	r24, r29
     764:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
   	DIO_vidSetPinMode(enuENPortNum, enuENPinNum, OUTPUT);
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	60 2f       	mov	r22, r16
     76c:	8f 2d       	mov	r24, r15
     76e:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
	if(enuNibble == LOW_NIBBLE)
     772:	e1 10       	cpse	r14, r1
     774:	52 c0       	rjmp	.+164    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	{
		DIO_vidSetLowNibbleMode(enuDataPortNum, OUTPUT);
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	8c 2f       	mov	r24, r28
     77a:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_vidSetLowNibbleMode>
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, LOW_NIBBLE,LCD_RETURN_HOME);
     77e:	68 94       	set
     780:	cc 24       	eor	r12, r12
     782:	c1 f8       	bld	r12, 1
     784:	2f 2d       	mov	r18, r15
     786:	41 2f       	mov	r20, r17
     788:	6d 2f       	mov	r22, r29
     78a:	8c 2f       	mov	r24, r28
     78c:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     790:	8f e2       	ldi	r24, 0x2F	; 47
     792:	95 e7       	ldi	r25, 0x75	; 117
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <LCD_vidInit4bit+0x60>
     798:	00 c0       	rjmp	.+0      	; 0x79a <LCD_vidInit4bit+0x66>
     79a:	00 00       	nop
		_delay_ms(15);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, LOW_NIBBLE,LCD_Function_4BIT_2Lines);
     79c:	0f 2e       	mov	r0, r31
     79e:	f8 e2       	ldi	r31, 0x28	; 40
     7a0:	cf 2e       	mov	r12, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	2f 2d       	mov	r18, r15
     7a6:	41 2f       	mov	r20, r17
     7a8:	6d 2f       	mov	r22, r29
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     7b0:	8f ec       	ldi	r24, 0xCF	; 207
     7b2:	97 e0       	ldi	r25, 0x07	; 7
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_vidInit4bit+0x80>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_vidInit4bit+0x86>
     7ba:	00 00       	nop
		_delay_ms(1);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, LOW_NIBBLE,LCD_DISP_ON_CURSOR_ON);
     7bc:	0f 2e       	mov	r0, r31
     7be:	fe e0       	ldi	r31, 0x0E	; 14
     7c0:	cf 2e       	mov	r12, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	2f 2d       	mov	r18, r15
     7c6:	41 2f       	mov	r20, r17
     7c8:	6d 2f       	mov	r22, r29
     7ca:	8c 2f       	mov	r24, r28
     7cc:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     7d0:	8f ec       	ldi	r24, 0xCF	; 207
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCD_vidInit4bit+0xa0>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <LCD_vidInit4bit+0xa6>
     7da:	00 00       	nop
		_delay_ms(1);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, LOW_NIBBLE,LCD_CLEAR_SCREEN);
     7dc:	cc 24       	eor	r12, r12
     7de:	c3 94       	inc	r12
     7e0:	2f 2d       	mov	r18, r15
     7e2:	41 2f       	mov	r20, r17
     7e4:	6d 2f       	mov	r22, r29
     7e6:	8c 2f       	mov	r24, r28
     7e8:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     7ec:	8f e1       	ldi	r24, 0x1F	; 31
     7ee:	9e e4       	ldi	r25, 0x4E	; 78
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <LCD_vidInit4bit+0xbc>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <LCD_vidInit4bit+0xc2>
     7f6:	00 00       	nop
		_delay_ms(10);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, LOW_NIBBLE,LCD_ENTRY_MODE);
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f6 e0       	ldi	r31, 0x06	; 6
     7fc:	cf 2e       	mov	r12, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	2f 2d       	mov	r18, r15
     802:	41 2f       	mov	r20, r17
     804:	6d 2f       	mov	r22, r29
     806:	8c 2f       	mov	r24, r28
     808:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     80c:	8f ec       	ldi	r24, 0xCF	; 207
     80e:	97 e0       	ldi	r25, 0x07	; 7
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     816:	00 00       	nop
     818:	53 c0       	rjmp	.+166    	; 0x8c0 <__stack+0x61>
		_delay_ms(1);
	}
	else
	{
		DIO_vidSetHighNibbleMode(enuDataPortNum, OUTPUT);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	8c 2f       	mov	r24, r28
     81e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vidSetHighNibbleMode>
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, HIGH_NIBBLE,LCD_RETURN_HOME);
     822:	68 94       	set
     824:	cc 24       	eor	r12, r12
     826:	c1 f8       	bld	r12, 1
     828:	ee 24       	eor	r14, r14
     82a:	e3 94       	inc	r14
     82c:	2f 2d       	mov	r18, r15
     82e:	41 2f       	mov	r20, r17
     830:	6d 2f       	mov	r22, r29
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     838:	8f e2       	ldi	r24, 0x2F	; 47
     83a:	95 e7       	ldi	r25, 0x75	; 117
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     840:	00 c0       	rjmp	.+0      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     842:	00 00       	nop
		_delay_ms(15);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, HIGH_NIBBLE,LCD_Function_4BIT_2Lines);
     844:	0f 2e       	mov	r0, r31
     846:	f8 e2       	ldi	r31, 0x28	; 40
     848:	cf 2e       	mov	r12, r31
     84a:	f0 2d       	mov	r31, r0
     84c:	2f 2d       	mov	r18, r15
     84e:	41 2f       	mov	r20, r17
     850:	6d 2f       	mov	r22, r29
     852:	8c 2f       	mov	r24, r28
     854:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     858:	8f ec       	ldi	r24, 0xCF	; 207
     85a:	97 e0       	ldi	r25, 0x07	; 7
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
     862:	00 00       	nop
		_delay_ms(1);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, HIGH_NIBBLE,LCD_DISP_ON_CURSOR_ON);
     864:	0f 2e       	mov	r0, r31
     866:	fe e0       	ldi	r31, 0x0E	; 14
     868:	cf 2e       	mov	r12, r31
     86a:	f0 2d       	mov	r31, r0
     86c:	2f 2d       	mov	r18, r15
     86e:	41 2f       	mov	r20, r17
     870:	6d 2f       	mov	r22, r29
     872:	8c 2f       	mov	r24, r28
     874:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     878:	8f ec       	ldi	r24, 0xCF	; 207
     87a:	97 e0       	ldi	r25, 0x07	; 7
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x1d>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
		_delay_ms(1);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, HIGH_NIBBLE,LCD_CLEAR_SCREEN);
     884:	cc 24       	eor	r12, r12
     886:	c3 94       	inc	r12
     888:	2f 2d       	mov	r18, r15
     88a:	41 2f       	mov	r20, r17
     88c:	6d 2f       	mov	r22, r29
     88e:	8c 2f       	mov	r24, r28
     890:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     894:	8f e1       	ldi	r24, 0x1F	; 31
     896:	9e e4       	ldi	r25, 0x4E	; 78
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
     89e:	00 00       	nop
		_delay_ms(10);
		LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, HIGH_NIBBLE,LCD_ENTRY_MODE);
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f6 e0       	ldi	r31, 0x06	; 6
     8a4:	cf 2e       	mov	r12, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	2f 2d       	mov	r18, r15
     8aa:	41 2f       	mov	r20, r17
     8ac:	6d 2f       	mov	r22, r29
     8ae:	8c 2f       	mov	r24, r28
     8b0:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     8b4:	8f ec       	ldi	r24, 0xCF	; 207
     8b6:	97 e0       	ldi	r25, 0x07	; 7
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
		_delay_ms(1);
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	08 95       	ret

000008d2 <LCD_vidDisplayChar4bit>:
		_delay_ms(2);
	}
}

void LCD_vidDisplayChar4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 u8char)
{
     8d2:	cf 92       	push	r12
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	f8 2e       	mov	r15, r24
     8e2:	d6 2f       	mov	r29, r22
     8e4:	14 2f       	mov	r17, r20
     8e6:	c2 2f       	mov	r28, r18
	if(enuNibble == LOW_NIBBLE)
     8e8:	e1 10       	cpse	r14, r1
     8ea:	22 c0       	rjmp	.+68     	; 0x930 <LCD_vidDisplayChar4bit+0x5e>
	{
		DIO_vidWriteLowNibble(enuDataPortNum, u8char>>4);
     8ec:	6c 2d       	mov	r22, r12
     8ee:	62 95       	swap	r22
     8f0:	6f 70       	andi	r22, 0x0F	; 15
     8f2:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	61 2f       	mov	r22, r17
     8fa:	8d 2f       	mov	r24, r29
     8fc:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     900:	60 2f       	mov	r22, r16
     902:	8c 2f       	mov	r24, r28
     904:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
		DIO_vidWriteLowNibble(enuDataPortNum, u8char);
     908:	6c 2d       	mov	r22, r12
     90a:	8f 2d       	mov	r24, r15
     90c:	0e 94 29 02 	call	0x452	; 0x452 <DIO_vidWriteLowNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	61 2f       	mov	r22, r17
     914:	8d 2f       	mov	r24, r29
     916:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     91a:	60 2f       	mov	r22, r16
     91c:	8c 2f       	mov	r24, r28
     91e:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
     922:	8f e9       	ldi	r24, 0x9F	; 159
     924:	9f e0       	ldi	r25, 0x0F	; 15
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <LCD_vidDisplayChar4bit+0x54>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <LCD_vidDisplayChar4bit+0x5a>
     92c:	00 00       	nop
     92e:	21 c0       	rjmp	.+66     	; 0x972 <LCD_vidDisplayChar4bit+0xa0>
		_delay_ms(2);
	}
	else
	{
		DIO_vidWriteHighNibble(enuDataPortNum, u8char);
     930:	6c 2d       	mov	r22, r12
     932:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	61 2f       	mov	r22, r17
     93a:	8d 2f       	mov	r24, r29
     93c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     940:	60 2f       	mov	r22, r16
     942:	8c 2f       	mov	r24, r28
     944:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
		DIO_vidWriteHighNibble(enuDataPortNum, u8char<<4);
     948:	6c 2d       	mov	r22, r12
     94a:	62 95       	swap	r22
     94c:	60 7f       	andi	r22, 0xF0	; 240
     94e:	8f 2d       	mov	r24, r15
     950:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	61 2f       	mov	r22, r17
     958:	8d 2f       	mov	r24, r29
     95a:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     95e:	60 2f       	mov	r22, r16
     960:	8c 2f       	mov	r24, r28
     962:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vidSendEnablePulse>
     966:	8f e9       	ldi	r24, 0x9F	; 159
     968:	9f e0       	ldi	r25, 0x0F	; 15
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <LCD_vidDisplayChar4bit+0x98>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <LCD_vidDisplayChar4bit+0x9e>
     970:	00 00       	nop
		_delay_ms(2);
	}
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	cf 90       	pop	r12
     980:	08 95       	ret

00000982 <LCD_voidDisplayString4bit>:

void LCD_voidDisplayString4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 *ptru8String)
{
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	88 2e       	mov	r8, r24
     99c:	96 2e       	mov	r9, r22
     99e:	a4 2e       	mov	r10, r20
     9a0:	b2 2e       	mov	r11, r18
     9a2:	f0 2e       	mov	r15, r16
     9a4:	1e 2d       	mov	r17, r14
     9a6:	e6 01       	movw	r28, r12
	while((*ptru8String) != '\0')
     9a8:	09 c0       	rjmp	.+18     	; 0x9bc <LCD_voidDisplayString4bit+0x3a>
	{
		LCD_vidDisplayChar4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, enuNibble, *ptru8String);
     9aa:	e1 2e       	mov	r14, r17
     9ac:	0f 2d       	mov	r16, r15
     9ae:	2b 2d       	mov	r18, r11
     9b0:	4a 2d       	mov	r20, r10
     9b2:	69 2d       	mov	r22, r9
     9b4:	88 2d       	mov	r24, r8
     9b6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_vidDisplayChar4bit>
		ptru8String++;
     9ba:	21 96       	adiw	r28, 0x01	; 1
	}
}

void LCD_voidDisplayString4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 *ptru8String)
{
	while((*ptru8String) != '\0')
     9bc:	c8 80       	ld	r12, Y
     9be:	c1 10       	cpse	r12, r1
     9c0:	f4 cf       	rjmp	.-24     	; 0x9aa <LCD_voidDisplayString4bit+0x28>
	{
		LCD_vidDisplayChar4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, enuNibble, *ptru8String);
		ptru8String++;
	}
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	08 95       	ret

000009dc <LCD_vidClearScreen4bit>:

void LCD_vidClearScreen4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum, _enuPINX enuENPinNum,_enuNIBBLE enuNibble)
{
     9dc:	cf 92       	push	r12
     9de:	ef 92       	push	r14
     9e0:	0f 93       	push	r16
	LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, enuNibble ,LCD_CLEAR_SCREEN);
     9e2:	cc 24       	eor	r12, r12
     9e4:	c3 94       	inc	r12
     9e6:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     9ea:	8f e1       	ldi	r24, 0x1F	; 31
     9ec:	9e e4       	ldi	r25, 0x4E	; 78
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCD_vidClearScreen4bit+0x12>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCD_vidClearScreen4bit+0x18>
     9f4:	00 00       	nop
	_delay_ms(10);
}
     9f6:	0f 91       	pop	r16
     9f8:	ef 90       	pop	r14
     9fa:	cf 90       	pop	r12
     9fc:	08 95       	ret

000009fe <LCD_vidMoveCursor4bit>:

void LCD_vidMoveCursor4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum , _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 u8Line, u8 u8Position)
{
     9fe:	af 92       	push	r10
     a00:	cf 92       	push	r12
     a02:	ef 92       	push	r14
     a04:	0f 93       	push	r16
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	9c 0d       	add	r25, r12
     a0a:	92 30       	cpi	r25, 0x02	; 2
     a0c:	b8 f4       	brcc	.+46     	; 0xa3c <LCD_vidMoveCursor4bit+0x3e>
     a0e:	aa 20       	and	r10, r10
     a10:	c9 f0       	breq	.+50     	; 0xa44 <LCD_vidMoveCursor4bit+0x46>
     a12:	90 e1       	ldi	r25, 0x10	; 16
     a14:	9a 15       	cp	r25, r10
     a16:	d0 f0       	brcs	.+52     	; 0xa4c <LCD_vidMoveCursor4bit+0x4e>
	{
		u8data = 0x80;
	}
	else if(u8Line == 1)
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	c9 12       	cpse	r12, r25
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <LCD_vidMoveCursor4bit+0x2c>
	{
		u8data = 0x80 + (u8Position - 1);
     a1e:	0f 2e       	mov	r0, r31
     a20:	ff e7       	ldi	r31, 0x7F	; 127
     a22:	cf 2e       	mov	r12, r31
     a24:	f0 2d       	mov	r31, r0
     a26:	ca 0c       	add	r12, r10
     a28:	16 c0       	rjmp	.+44     	; 0xa56 <LCD_vidMoveCursor4bit+0x58>
	}
	else if(u8Line == 2)
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	c9 12       	cpse	r12, r25
     a2e:	12 c0       	rjmp	.+36     	; 0xa54 <LCD_vidMoveCursor4bit+0x56>
	{
		u8data = 0xC0 + (u8Position - 1);
     a30:	0f 2e       	mov	r0, r31
     a32:	ff eb       	ldi	r31, 0xBF	; 191
     a34:	cf 2e       	mov	r12, r31
     a36:	f0 2d       	mov	r31, r0
     a38:	ca 0c       	add	r12, r10
     a3a:	0d c0       	rjmp	.+26     	; 0xa56 <LCD_vidMoveCursor4bit+0x58>
void LCD_vidMoveCursor4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum , _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
	{
		u8data = 0x80;
     a3c:	68 94       	set
     a3e:	cc 24       	eor	r12, r12
     a40:	c7 f8       	bld	r12, 7
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <LCD_vidMoveCursor4bit+0x58>
     a44:	68 94       	set
     a46:	cc 24       	eor	r12, r12
     a48:	c7 f8       	bld	r12, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <LCD_vidMoveCursor4bit+0x58>
     a4c:	68 94       	set
     a4e:	cc 24       	eor	r12, r12
     a50:	c7 f8       	bld	r12, 7
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <LCD_vidMoveCursor4bit+0x58>
	_delay_ms(10);
}

void LCD_vidMoveCursor4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum , _enuPINX enuENPinNum,_enuNIBBLE enuNibble, u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
     a54:	c1 2c       	mov	r12, r1
	}
	else if(u8Line == 2)
	{
		u8data = 0xC0 + (u8Position - 1);
	}
	LCD_vidSendCmd4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, enuNibble, u8data);
     a56:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     a5a:	8f ec       	ldi	r24, 0xCF	; 207
     a5c:	97 e0       	ldi	r25, 0x07	; 7
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCD_vidMoveCursor4bit+0x60>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <LCD_vidMoveCursor4bit+0x66>
     a64:	00 00       	nop
	_delay_ms(1);
}
     a66:	0f 91       	pop	r16
     a68:	ef 90       	pop	r14
     a6a:	cf 90       	pop	r12
     a6c:	af 90       	pop	r10
     a6e:	08 95       	ret

00000a70 <LCD_vidDisplayNumber4bit>:

void LCD_vidDisplayNumber4bit(_enuGPIOX enuDataPortNum, _enuGPIOX enuRSPortNum, _enuPINX enuRSPinNum, _enuGPIOX enuENPortNum , _enuPINX enuENPinNum, _enuNIBBLE enuNibble, u32 copy_u32Number)
{
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	27 97       	sbiw	r28, 0x07	; 7
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	18 2f       	mov	r17, r24
     a9a:	f6 2e       	mov	r15, r22
     a9c:	94 2e       	mov	r9, r20
     a9e:	82 2e       	mov	r8, r18
	u8 str[7];
	sprintf(str,"%d",copy_u32Number);
     aa0:	df 92       	push	r13
     aa2:	cf 92       	push	r12
     aa4:	bf 92       	push	r11
     aa6:	af 92       	push	r10
     aa8:	81 e7       	ldi	r24, 0x71	; 113
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	6c 01       	movw	r12, r24
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0e 94 c3 0a 	call	0x1586	; 0x1586 <sprintf>
	LCD_voidDisplayString4bit(enuDataPortNum, enuRSPortNum, enuRSPinNum, enuENPortNum, enuENPinNum, enuNibble, str);
     abe:	28 2d       	mov	r18, r8
     ac0:	49 2d       	mov	r20, r9
     ac2:	6f 2d       	mov	r22, r15
     ac4:	81 2f       	mov	r24, r17
     ac6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
}
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	27 96       	adiw	r28, 0x07	; 7
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	08 95       	ret

00000afa <LED_vidLEDInit>:
#include "LED_private.h"
#include "LED_config.h"

void LED_vidLEDInit(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
     b00:	08 95       	ret

00000b02 <LED_vidLEDOn>:
}

void LED_vidLEDOn(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
     b08:	08 95       	ret

00000b0a <LED_vidLEDOff>:
}

void LED_vidLEDOff(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
     b10:	08 95       	ret

00000b12 <LED_vidLEDToggle>:
}

void LED_vidLEDToggle(_enuGPIOX enuPortNum, _enuPINX enuPinNum)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	c8 2f       	mov	r28, r24
     b18:	d6 2f       	mov	r29, r22
    _enuOUTPUT enuOUTPUT;
    enuOUTPUT = DIO_enuReadPin(enuPortNum, enuPinNum);
     b1a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_enuReadPin>
    if(enuOUTPUT == HIGH)
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	31 f4       	brne	.+12     	; 0xb2e <LED_vidLEDToggle+0x1c>
    {
        DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	6d 2f       	mov	r22, r29
     b26:	8c 2f       	mov	r24, r28
     b28:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <LED_vidLEDToggle+0x26>
    }
    else 
    {
        DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	6d 2f       	mov	r22, r29
     b32:	8c 2f       	mov	r24, r28
     b34:	0e 94 04 01 	call	0x208	; 0x208 <DIO_vidWritePin>
    }
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <LM35_vidInit>:
#include "LM35_config.h"
#include "LM35_private.h"

void LM35_vidInit(_enuADCChannels enuADCChannel)
{
	ADC_vidInit(enuADCChannel);
     b3e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vidInit>
     b42:	08 95       	ret

00000b44 <LM35_u8Read>:
u8 LM35_u8Read(void)
{
	u16 u16Read, u16Analog;
	u8 u8Temp;
	/* Return Digital value*/
	u16Read = ADC_u16Read();
     b44:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_u16Read>
	/* Calculate Analog value */
	u16Analog = (INT_VREF * u16Read) / 1024;
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	3a e0       	ldi	r19, 0x0A	; 10
     b4c:	ac 01       	movw	r20, r24
     b4e:	42 9f       	mul	r20, r18
     b50:	c0 01       	movw	r24, r0
     b52:	43 9f       	mul	r20, r19
     b54:	90 0d       	add	r25, r0
     b56:	52 9f       	mul	r21, r18
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
	/* Calculate Temperature value */
	u8Temp = u16Analog / 10;
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	78 e2       	ldi	r23, 0x28	; 40
     b60:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__udivmodhi4>
     b64:	86 2f       	mov	r24, r22
	return u8Temp;
     b66:	08 95       	ret

00000b68 <Enter_password>:
		g = check_passsword();
	}
}


void Enter_password(){
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	0f 93       	push	r16
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	89 e6       	ldi	r24, 0x69	; 105
     b74:	98 e1       	ldi	r25, 0x18	; 24
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <Enter_password+0xe>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <Enter_password+0x18>
     b80:	00 00       	nop
	
	_delay_ms(1000);
	
	LCD_vidClearScreen4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     b82:	ee 24       	eor	r14, r14
     b84:	e3 94       	inc	r14
     b86:	02 e0       	ldi	r16, 0x02	; 2
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	43 e0       	ldi	r20, 0x03	; 3
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Enter pass:");
     b94:	0f 2e       	mov	r0, r31
     b96:	f0 e8       	ldi	r31, 0x80	; 128
     b98:	cf 2e       	mov	r12, r31
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	43 e0       	ldi	r20, 0x03	; 3
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	81 ee       	ldi	r24, 0xE1	; 225
     bb0:	94 e0       	ldi	r25, 0x04	; 4
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	80 40       	sbci	r24, 0x00	; 0
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <Enter_password+0x4a>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <Enter_password+0x54>
     bbc:	00 00       	nop
	
	_delay_ms(200);
	
	LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
     bbe:	0f 2e       	mov	r0, r31
     bc0:	f0 ec       	ldi	r31, 0xC0	; 192
     bc2:	cf 2e       	mov	r12, r31
     bc4:	f0 2d       	mov	r31, r0
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	43 e0       	ldi	r20, 0x03	; 3
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
	
	for (k=0; k<4; k++)
     bd2:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <k>
     bd6:	45 c0       	rjmp	.+138    	; 0xc62 <Enter_password+0xfa>
	{
		do 
		{
			KEY_System = KPD_u8GetPressedKey(GPIOC,LOW_NIBBLE,HIGH_NIBBLE);
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	0e 94 a2 02 	call	0x544	; 0x544 <KPD_u8GetPressedKey>
     be2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <KEY_System>
			
		} while (KEY_System == 0xff);
     be6:	8f 3f       	cpi	r24, 0xFF	; 255
     be8:	b9 f3       	breq	.-18     	; 0xbd8 <Enter_password+0x70>
		LCD_vidDisplayChar4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, KEY_System);
     bea:	c8 2e       	mov	r12, r24
     bec:	ee 24       	eor	r14, r14
     bee:	e3 94       	inc	r14
     bf0:	02 e0       	ldi	r16, 0x02	; 2
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	43 e0       	ldi	r20, 0x03	; 3
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_vidDisplayChar4bit>
     bfe:	2f ef       	ldi	r18, 0xFF	; 255
     c00:	84 e3       	ldi	r24, 0x34	; 52
     c02:	9c e0       	ldi	r25, 0x0C	; 12
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	80 40       	sbci	r24, 0x00	; 0
     c08:	90 40       	sbci	r25, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <Enter_password+0x9c>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <Enter_password+0xa6>
     c0e:	00 00       	nop
		
		_delay_ms (500);
		
		check_password[k] = KEY_System;
     c10:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <k>
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ea 54       	subi	r30, 0x4A	; 74
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <KEY_System>
     c1e:	80 83       	st	Z, r24
		
		LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, LCD_MOVE_CURSOR_LEFT);
     c20:	68 94       	set
     c22:	cc 24       	eor	r12, r12
     c24:	c4 f8       	bld	r12, 4
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	43 e0       	ldi	r20, 0x03	; 3
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
		
		LCD_vidDisplayChar4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,'*');
     c32:	0f 2e       	mov	r0, r31
     c34:	fa e2       	ldi	r31, 0x2A	; 42
     c36:	cf 2e       	mov	r12, r31
     c38:	f0 2d       	mov	r31, r0
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	43 e0       	ldi	r20, 0x03	; 3
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_vidDisplayChar4bit>
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	80 e7       	ldi	r24, 0x70	; 112
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <Enter_password+0xe4>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <Enter_password+0xee>
     c56:	00 00       	nop
	
	_delay_ms(200);
	
	LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
	
	for (k=0; k<4; k++)
     c58:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <k>
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <k>
     c62:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <k>
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	08 f4       	brcc	.+2      	; 0xc6c <Enter_password+0x104>
     c6a:	b6 cf       	rjmp	.-148    	; 0xbd8 <Enter_password+0x70>
		LCD_vidDisplayChar4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,'*');
		
		_delay_ms (100);
		
	}
}
     c6c:	0f 91       	pop	r16
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <system_operations>:
	}
	
	
	
void system_operations()
{
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	0f 93       	push	r16
	temp = LM35_u8Read();
     c7e:	0e 94 a2 05 	call	0xb44	; 0xb44 <LM35_u8Read>
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <temp+0x1>
     c88:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <temp>

if (temp<=25)
     c8c:	8a 31       	cpi	r24, 0x1A	; 26
     c8e:	91 05       	cpc	r25, r1
     c90:	70 f5       	brcc	.+92     	; 0xcee <system_operations+0x78>
{
	DC_vidStart(GPIOD, PIN2, OUTPUT);
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 8a 00 	call	0x114	; 0x114 <DC_vidStart>
	
	USART_vidSendString("The condition of the house is bad");
     c9c:	8c e8       	ldi	r24, 0x8C	; 140
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_vidSendString>
	
	LED_vidLEDToggle(GPIOB, PIN0);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_vidLEDToggle>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, " unstable ");
     cac:	0f 2e       	mov	r0, r31
     cae:	fe ea       	ldi	r31, 0xAE	; 174
     cb0:	cf 2e       	mov	r12, r31
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	df 2e       	mov	r13, r31
     cb6:	f0 2d       	mov	r31, r0
     cb8:	ee 24       	eor	r14, r14
     cba:	e3 94       	inc	r14
     cbc:	02 e0       	ldi	r16, 0x02	; 2
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	43 e0       	ldi	r20, 0x03	; 3
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
	
	BUZZER_vidLEDOn(GPIOB,PIN5);
     cca:	65 e0       	ldi	r22, 0x05	; 5
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 74 00 	call	0xe8	; 0xe8 <BUZZER_vidLEDOn>
     cd2:	2f ef       	ldi	r18, 0xFF	; 255
     cd4:	89 e6       	ldi	r24, 0x69	; 105
     cd6:	98 e1       	ldi	r25, 0x18	; 24
     cd8:	21 50       	subi	r18, 0x01	; 1
     cda:	80 40       	sbci	r24, 0x00	; 0
     cdc:	90 40       	sbci	r25, 0x00	; 0
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <system_operations+0x62>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <system_operations+0x6c>
     ce2:	00 00       	nop
	
	_delay_ms(1000);
	
	BUZZER_vidLEDOff(GPIOB,PIN5);
     ce4:	65 e0       	ldi	r22, 0x05	; 5
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 78 00 	call	0xf0	; 0xf0 <BUZZER_vidLEDOff>
     cec:	99 c0       	rjmp	.+306    	; 0xe20 <system_operations+0x1aa>
	
}
else if((temp > 25 )&& (temp >= 44))
     cee:	8c 32       	cpi	r24, 0x2C	; 44
     cf0:	91 05       	cpc	r25, r1
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <system_operations+0x80>
     cf4:	41 c0       	rjmp	.+130    	; 0xd78 <system_operations+0x102>
{
	
	LCD_vidClearScreen4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     cf6:	ee 24       	eor	r14, r14
     cf8:	e3 94       	inc	r14
     cfa:	02 e0       	ldi	r16, 0x02	; 2
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	43 e0       	ldi	r20, 0x03	; 3
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
	
	DC_vidStart(GPIOD, PIN2, OUTPUT);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	0e 94 8a 00 	call	0x114	; 0x114 <DC_vidStart>
	
	USART_vidSendString("The house temperature is stable");
     d12:	89 eb       	ldi	r24, 0xB9	; 185
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_vidSendString>
	
	LED_vidLEDOn(GPIOB, PIN1);
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 81 05 	call	0xb02	; 0xb02 <LED_vidLEDOn>
     d22:	2f ef       	ldi	r18, 0xFF	; 255
     d24:	84 e3       	ldi	r24, 0x34	; 52
     d26:	9c e0       	ldi	r25, 0x0C	; 12
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	80 40       	sbci	r24, 0x00	; 0
     d2c:	90 40       	sbci	r25, 0x00	; 0
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <system_operations+0xb2>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <system_operations+0xbc>
     d32:	00 00       	nop
	_delay_ms(500);
	LED_vidLEDOff(GPIOB, PIN1);
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 85 05 	call	0xb0a	; 0xb0a <LED_vidLEDOff>
	
	LED_vidLEDOn(GPIOB, PIN2);
     d3c:	62 e0       	ldi	r22, 0x02	; 2
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 81 05 	call	0xb02	; 0xb02 <LED_vidLEDOn>
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	84 e3       	ldi	r24, 0x34	; 52
     d48:	9c e0       	ldi	r25, 0x0C	; 12
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <system_operations+0xd4>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <system_operations+0xde>
     d54:	00 00       	nop
	_delay_ms(500);
	LED_vidLEDOff(GPIOB, PIN2);
     d56:	62 e0       	ldi	r22, 0x02	; 2
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 85 05 	call	0xb0a	; 0xb0a <LED_vidLEDOff>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, " stable ");
     d5e:	0f 2e       	mov	r0, r31
     d60:	f9 ed       	ldi	r31, 0xD9	; 217
     d62:	cf 2e       	mov	r12, r31
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	df 2e       	mov	r13, r31
     d68:	f0 2d       	mov	r31, r0
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	43 e0       	ldi	r20, 0x03	; 3
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
     d76:	54 c0       	rjmp	.+168    	; 0xe20 <system_operations+0x1aa>
	
	
}

else if((temp>45))
     d78:	8e 97       	sbiw	r24, 0x2e	; 46
     d7a:	a0 f1       	brcs	.+104    	; 0xde4 <system_operations+0x16e>
{
	LCD_vidClearScreen4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     d7c:	ee 24       	eor	r14, r14
     d7e:	e3 94       	inc	r14
     d80:	02 e0       	ldi	r16, 0x02	; 2
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	43 e0       	ldi	r20, 0x03	; 3
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
	
	DC_vidStart(GPIOD, PIN2, OUTPUT);
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	62 e0       	ldi	r22, 0x02	; 2
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	0e 94 8a 00 	call	0x114	; 0x114 <DC_vidStart>
	
	USART_vidSendString("The condition of the house is bad");
     d98:	8c e8       	ldi	r24, 0x8C	; 140
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_vidSendString>
	
	LED_vidLEDToggle(GPIOB, PIN2);
     da0:	62 e0       	ldi	r22, 0x02	; 2
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_vidLEDToggle>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, " unstable ");
     da8:	0f 2e       	mov	r0, r31
     daa:	fe ea       	ldi	r31, 0xAE	; 174
     dac:	cf 2e       	mov	r12, r31
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	df 2e       	mov	r13, r31
     db2:	f0 2d       	mov	r31, r0
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	43 e0       	ldi	r20, 0x03	; 3
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
	
	BUZZER_vidLEDOn(GPIOB,PIN5);
     dc0:	65 e0       	ldi	r22, 0x05	; 5
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 74 00 	call	0xe8	; 0xe8 <BUZZER_vidLEDOn>
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	89 e6       	ldi	r24, 0x69	; 105
     dcc:	98 e1       	ldi	r25, 0x18	; 24
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	90 40       	sbci	r25, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <system_operations+0x158>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <system_operations+0x162>
     dd8:	00 00       	nop
	
	_delay_ms(1000);
	
	BUZZER_vidLEDOff(GPIOB,PIN5);
     dda:	65 e0       	ldi	r22, 0x05	; 5
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 78 00 	call	0xf0	; 0xf0 <BUZZER_vidLEDOff>
     de2:	1e c0       	rjmp	.+60     	; 0xe20 <system_operations+0x1aa>

}

else
{
	LCD_vidClearScreen4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     de4:	ee 24       	eor	r14, r14
     de6:	e3 94       	inc	r14
     de8:	02 e0       	ldi	r16, 0x02	; 2
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	43 e0       	ldi	r20, 0x03	; 3
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
	
	USART_vidSendString("Don't worry, The house is safe");
     df6:	82 ee       	ldi	r24, 0xE2	; 226
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_vidSendString>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, " The house is safe ");
     dfe:	0f 2e       	mov	r0, r31
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	cf 2e       	mov	r12, r31
     e04:	f1 e0       	ldi	r31, 0x01	; 1
     e06:	df 2e       	mov	r13, r31
     e08:	f0 2d       	mov	r31, r0
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	43 e0       	ldi	r20, 0x03	; 3
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
	
	DC_vidStart(GPIOD, PIN2, OUTPUT);
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	0e 94 8a 00 	call	0x114	; 0x114 <DC_vidStart>
}

}
     e20:	0f 91       	pop	r16
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	08 95       	ret

00000e2a <check_passsword>:
		
	}
}

u8 check_passsword()
{
     e2a:	af 92       	push	r10
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	0f 93       	push	r16
	if (check_password[0] == password[0] && check_password[1] == password[1] && check_password[2] == password[2] && check_password[3] == password[3])
     e36:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <check_password>
     e3a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <password>
     e3e:	98 13       	cpse	r25, r24
     e40:	8f c0       	rjmp	.+286    	; 0xf60 <check_passsword+0x136>
     e42:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <check_password+0x1>
     e46:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <password+0x1>
     e4a:	98 13       	cpse	r25, r24
     e4c:	89 c0       	rjmp	.+274    	; 0xf60 <check_passsword+0x136>
     e4e:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <check_password+0x2>
     e52:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <password+0x2>
     e56:	98 13       	cpse	r25, r24
     e58:	83 c0       	rjmp	.+262    	; 0xf60 <check_passsword+0x136>
     e5a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <check_password+0x3>
     e5e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <password+0x3>
     e62:	98 13       	cpse	r25, r24
     e64:	7d c0       	rjmp	.+250    	; 0xf60 <check_passsword+0x136>
	{
		LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     e66:	ee 24       	eor	r14, r14
     e68:	e3 94       	inc	r14
     e6a:	02 e0       	ldi	r16, 0x02	; 2
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	43 e0       	ldi	r20, 0x03	; 3
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
		
		LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Pass is right ");
     e78:	0f 2e       	mov	r0, r31
     e7a:	f5 e1       	ldi	r31, 0x15	; 21
     e7c:	cf 2e       	mov	r12, r31
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	df 2e       	mov	r13, r31
     e82:	f0 2d       	mov	r31, r0
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	43 e0       	ldi	r20, 0x03	; 3
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
     e90:	2f ef       	ldi	r18, 0xFF	; 255
     e92:	84 e3       	ldi	r24, 0x34	; 52
     e94:	9c e0       	ldi	r25, 0x0C	; 12
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	80 40       	sbci	r24, 0x00	; 0
     e9a:	90 40       	sbci	r25, 0x00	; 0
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <check_passsword+0x6c>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <check_passsword+0x76>
     ea0:	00 00       	nop
		
		_delay_ms(500);
		
		 LCD_vidMoveCursor4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,1,1);
     ea2:	aa 24       	eor	r10, r10
     ea4:	a3 94       	inc	r10
     ea6:	cc 24       	eor	r12, r12
     ea8:	c3 94       	inc	r12
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	43 e0       	ldi	r20, 0x03	; 3
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vidMoveCursor4bit>
		 
		LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	43 e0       	ldi	r20, 0x03	; 3
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
     ec2:	2f ef       	ldi	r18, 0xFF	; 255
     ec4:	89 e6       	ldi	r24, 0x69	; 105
     ec6:	98 e1       	ldi	r25, 0x18	; 24
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	80 40       	sbci	r24, 0x00	; 0
     ecc:	90 40       	sbci	r25, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <check_passsword+0x9e>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <check_passsword+0xa8>
     ed2:	00 00       	nop
		
		_delay_ms(1000);
		
		LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "The door is open ");
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f4 e2       	ldi	r31, 0x24	; 36
     ed8:	cf 2e       	mov	r12, r31
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	df 2e       	mov	r13, r31
     ede:	f0 2d       	mov	r31, r0
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	43 e0       	ldi	r20, 0x03	; 3
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
		
		LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
     eec:	0f 2e       	mov	r0, r31
     eee:	f0 ec       	ldi	r31, 0xC0	; 192
     ef0:	cf 2e       	mov	r12, r31
     ef2:	f0 2d       	mov	r31, r0
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	43 e0       	ldi	r20, 0x03	; 3
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
     f00:	2f ef       	ldi	r18, 0xFF	; 255
     f02:	89 e6       	ldi	r24, 0x69	; 105
     f04:	98 e1       	ldi	r25, 0x18	; 24
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	80 40       	sbci	r24, 0x00	; 0
     f0a:	90 40       	sbci	r25, 0x00	; 0
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <check_passsword+0xdc>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <check_passsword+0xe6>
     f10:	00 00       	nop
		
		
		_delay_ms(1000);
		
		LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	43 e0       	ldi	r20, 0x03	; 3
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
		
		LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Welcome Mohamed ");
     f1e:	0f 2e       	mov	r0, r31
     f20:	f6 e3       	ldi	r31, 0x36	; 54
     f22:	cf 2e       	mov	r12, r31
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	df 2e       	mov	r13, r31
     f28:	f0 2d       	mov	r31, r0
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	43 e0       	ldi	r20, 0x03	; 3
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
     f36:	2f ef       	ldi	r18, 0xFF	; 255
     f38:	89 e6       	ldi	r24, 0x69	; 105
     f3a:	98 e1       	ldi	r25, 0x18	; 24
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	80 40       	sbci	r24, 0x00	; 0
     f40:	90 40       	sbci	r25, 0x00	; 0
     f42:	e1 f7       	brne	.-8      	; 0xf3c <check_passsword+0x112>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <check_passsword+0x11c>
     f46:	00 00       	nop
		_delay_ms(1000);
		LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	43 e0       	ldi	r20, 0x03	; 3
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
		g = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
		
		system_operations();
     f5a:	0e 94 3b 06 	call	0xc76	; 0xc76 <system_operations>
     f5e:	7c c0       	rjmp	.+248    	; 0x1058 <check_passsword+0x22e>
		
	} 
	else
	{
		if (counter > 0)
     f60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f64:	88 23       	and	r24, r24
     f66:	09 f4       	brne	.+2      	; 0xf6a <check_passsword+0x140>
     f68:	56 c0       	rjmp	.+172    	; 0x1016 <check_passsword+0x1ec>
		
		{
			
			LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
     f6a:	ee 24       	eor	r14, r14
     f6c:	e3 94       	inc	r14
     f6e:	02 e0       	ldi	r16, 0x02	; 2
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	43 e0       	ldi	r20, 0x03	; 3
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
			
			LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Pass is wrong ");
     f7c:	0f 2e       	mov	r0, r31
     f7e:	f7 e4       	ldi	r31, 0x47	; 71
     f80:	cf 2e       	mov	r12, r31
     f82:	f1 e0       	ldi	r31, 0x01	; 1
     f84:	df 2e       	mov	r13, r31
     f86:	f0 2d       	mov	r31, r0
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	43 e0       	ldi	r20, 0x03	; 3
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	89 e6       	ldi	r24, 0x69	; 105
     f98:	98 e1       	ldi	r25, 0x18	; 24
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	80 40       	sbci	r24, 0x00	; 0
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <check_passsword+0x170>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <check_passsword+0x17a>
     fa4:	00 00       	nop
			
			_delay_ms (1000);
			
			LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,0xC0);
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f0 ec       	ldi	r31, 0xC0	; 192
     faa:	cf 2e       	mov	r12, r31
     fac:	f0 2d       	mov	r31, r0
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	43 e0       	ldi	r20, 0x03	; 3
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
			
			LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Try again:");
     fba:	0f 2e       	mov	r0, r31
     fbc:	f6 e5       	ldi	r31, 0x56	; 86
     fbe:	cf 2e       	mov	r12, r31
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
     fc2:	df 2e       	mov	r13, r31
     fc4:	f0 2d       	mov	r31, r0
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	43 e0       	ldi	r20, 0x03	; 3
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
			
			LCD_vidDisplayNumber4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, counter);
     fd2:	a0 90 60 00 	lds	r10, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     fd6:	b1 2c       	mov	r11, r1
     fd8:	c1 2c       	mov	r12, r1
     fda:	d1 2c       	mov	r13, r1
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	43 e0       	ldi	r20, 0x03	; 3
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 38 05 	call	0xa70	; 0xa70 <LCD_vidDisplayNumber4bit>
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	89 e6       	ldi	r24, 0x69	; 105
     fec:	98 e1       	ldi	r25, 0x18	; 24
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <check_passsword+0x1c4>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <check_passsword+0x1ce>
     ff8:	00 00       	nop
			
			_delay_ms (1000);
			
			counter--;
     ffa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	43 e0       	ldi	r20, 0x03	; 3
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
			
			g = 0;
    1010:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <g>
    1014:	21 c0       	rjmp	.+66     	; 0x1058 <check_passsword+0x22e>
		
		else
		
		{
			
			LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
    1016:	ee 24       	eor	r14, r14
    1018:	e3 94       	inc	r14
    101a:	02 e0       	ldi	r16, 0x02	; 2
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	43 e0       	ldi	r20, 0x03	; 3
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
			
			LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "System Blocked");
    1028:	0f 2e       	mov	r0, r31
    102a:	f1 e6       	ldi	r31, 0x61	; 97
    102c:	cf 2e       	mov	r12, r31
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	df 2e       	mov	r13, r31
    1032:	f0 2d       	mov	r31, r0
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	43 e0       	ldi	r20, 0x03	; 3
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	89 e6       	ldi	r24, 0x69	; 105
    1044:	98 e1       	ldi	r25, 0x18	; 24
    1046:	21 50       	subi	r18, 0x01	; 1
    1048:	80 40       	sbci	r24, 0x00	; 0
    104a:	90 40       	sbci	r25, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <check_passsword+0x21c>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <check_passsword+0x226>
    1050:	00 00       	nop
			
			_delay_ms (1000);
			
			g = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
		
	}
	
	return g;
	
	}
    1058:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <g>
    105c:	0f 91       	pop	r16
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	08 95       	ret

0000106a <set_password>:
			
}

/********************************************_Function_***********************************/

void set_password(){
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	0f 93       	push	r16
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
	while (y<4)
    1076:	54 c0       	rjmp	.+168    	; 0x1120 <set_password+0xb6>
	{
	    KEY_System=KPD_u8GetPressedKey(GPIOC,LOW_NIBBLE,HIGH_NIBBLE);
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 a2 02 	call	0x544	; 0x544 <KPD_u8GetPressedKey>
    1082:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <KEY_System>
		if (KEY_System !=0xff)
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	09 f4       	brne	.+2      	; 0x108c <set_password+0x22>
    108a:	4a c0       	rjmp	.+148    	; 0x1120 <set_password+0xb6>
			{
				LCD_vidDisplayChar4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, KEY_System);
    108c:	c8 2e       	mov	r12, r24
    108e:	ee 24       	eor	r14, r14
    1090:	e3 94       	inc	r14
    1092:	02 e0       	ldi	r16, 0x02	; 2
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	43 e0       	ldi	r20, 0x03	; 3
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_vidDisplayChar4bit>
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	84 e3       	ldi	r24, 0x34	; 52
    10a4:	9c e0       	ldi	r25, 0x0C	; 12
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	80 40       	sbci	r24, 0x00	; 0
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <set_password+0x3c>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <set_password+0x46>
    10b0:	00 00       	nop
		
				_delay_ms (500);
		
				h[y] = KEY_System;
    10b2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <KEY_System>
    10bc:	fc 01       	movw	r30, r24
    10be:	e5 54       	subi	r30, 0x45	; 69
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	60 83       	st	Z, r22
		
				EEPROM_voidWrite (y + 1, h[y]);
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <EEPROM_voidWrite>
		
				password[y] = EEPROM_voidRead (y + 1);
    10ca:	c0 91 a2 01 	lds	r28, 0x01A2	; 0x8001a2 <__data_end>
    10ce:	d0 e0       	ldi	r29, 0x00	; 0
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <EEPROM_voidRead>
    10d8:	c7 55       	subi	r28, 0x57	; 87
    10da:	de 4f       	sbci	r29, 0xFE	; 254
    10dc:	88 83       	st	Y, r24
		
				y++;
    10de:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
		
				LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,LCD_MOVE_CURSOR_LEFT);
    10e8:	68 94       	set
    10ea:	cc 24       	eor	r12, r12
    10ec:	c4 f8       	bld	r12, 4
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	43 e0       	ldi	r20, 0x03	; 3
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
		
				LCD_vidDisplayChar4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, '*');
    10fa:	0f 2e       	mov	r0, r31
    10fc:	fa e2       	ldi	r31, 0x2A	; 42
    10fe:	cf 2e       	mov	r12, r31
    1100:	f0 2d       	mov	r31, r0
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	43 e0       	ldi	r20, 0x03	; 3
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_vidDisplayChar4bit>
    110e:	2f ef       	ldi	r18, 0xFF	; 255
    1110:	80 e7       	ldi	r24, 0x70	; 112
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	80 40       	sbci	r24, 0x00	; 0
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	e1 f7       	brne	.-8      	; 0x1114 <set_password+0xaa>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <set_password+0xb4>
    111e:	00 00       	nop
}

/********************************************_Function_***********************************/

void set_password(){
	while (y<4)
    1120:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	08 f4       	brcc	.+2      	; 0x112a <set_password+0xc0>
    1128:	a7 cf       	rjmp	.-178    	; 0x1078 <set_password+0xe>
    112a:	8f e1       	ldi	r24, 0x1F	; 31
    112c:	9e e4       	ldi	r25, 0x4E	; 78
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <set_password+0xc4>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <set_password+0xca>
    1134:	00 00       	nop
			}	
	}
	
	_delay_ms (10);
	
	LCD_vidClearScreen4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
    1136:	ee 24       	eor	r14, r14
    1138:	e3 94       	inc	r14
    113a:	02 e0       	ldi	r16, 0x02	; 2
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	43 e0       	ldi	r20, 0x03	; 3
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vidClearScreen4bit>
	
	LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Pass is set");
    1148:	0f 2e       	mov	r0, r31
    114a:	f0 e7       	ldi	r31, 0x70	; 112
    114c:	cf 2e       	mov	r12, r31
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	df 2e       	mov	r13, r31
    1152:	f0 2d       	mov	r31, r0
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	43 e0       	ldi	r20, 0x03	; 3
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
    1160:	9f ef       	ldi	r25, 0xFF	; 255
    1162:	29 e6       	ldi	r18, 0x69	; 105
    1164:	88 e1       	ldi	r24, 0x18	; 24
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	20 40       	sbci	r18, 0x00	; 0
    116a:	80 40       	sbci	r24, 0x00	; 0
    116c:	e1 f7       	brne	.-8      	; 0x1166 <set_password+0xfc>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <set_password+0x106>
    1170:	00 00       	nop
	
	_delay_ms (1000);
	
	Enter_password ();
    1172:	0e 94 b4 05 	call	0xb68	; 0xb68 <Enter_password>
	
	g = check_passsword();
    1176:	0e 94 15 07 	call	0xe2a	; 0xe2a <check_passsword>
    117a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
	
	while (g==0)
    117e:	06 c0       	rjmp	.+12     	; 0x118c <set_password+0x122>
	{
		Enter_password ();
    1180:	0e 94 b4 05 	call	0xb68	; 0xb68 <Enter_password>
		
		g = check_passsword();
    1184:	0e 94 15 07 	call	0xe2a	; 0xe2a <check_passsword>
    1188:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
	
	Enter_password ();
	
	g = check_passsword();
	
	while (g==0)
    118c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <g>
    1190:	88 23       	and	r24, r24
    1192:	b1 f3       	breq	.-20     	; 0x1180 <set_password+0x116>
	{
		Enter_password ();
		
		g = check_passsword();
	}
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	0f 91       	pop	r16
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	08 95       	ret

000011a2 <main>:


int main(void)
{
	/*****************************************************_initialization_*******************************/
	LED_vidLEDInit(GPIOB, PIN0);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	0e 94 7d 05 	call	0xafa	; 0xafa <LED_vidLEDInit>
	
	LED_vidLEDInit(GPIOB, PIN1);
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	0e 94 7d 05 	call	0xafa	; 0xafa <LED_vidLEDInit>
	
	LED_vidLEDInit(GPIOB, PIN2);
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	0e 94 7d 05 	call	0xafa	; 0xafa <LED_vidLEDInit>
	
	LED_vidLEDInit(GPIOB, PIN3);
    11ba:	63 e0       	ldi	r22, 0x03	; 3
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	0e 94 7d 05 	call	0xafa	; 0xafa <LED_vidLEDInit>
	
	BUZZER_vidLEDInit(GPIOB, PIN5);
    11c2:	65 e0       	ldi	r22, 0x05	; 5
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 70 00 	call	0xe0	; 0xe0 <BUZZER_vidLEDInit>
	
	LCD_vidInit4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE);
    11ca:	ee 24       	eor	r14, r14
    11cc:	e3 94       	inc	r14
    11ce:	02 e0       	ldi	r16, 0x02	; 2
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	43 e0       	ldi	r20, 0x03	; 3
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vidInit4bit>
	
	KPD_vidInit(GPIOC, LOW_NIBBLE, HIGH_NIBBLE);
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	0e 94 85 02 	call	0x50a	; 0x50a <KPD_vidInit>
	
	/*ADC_vidInit(ADC0_CHANNEL);*/
	
	LM35_vidInit(ADC0_CHANNEL);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LM35_vidInit>
	
	DC_vidInit(GPIOD,PIN2);
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <DC_vidInit>
	
	USART_vidInit(9600);
    11f4:	60 e8       	ldi	r22, 0x80	; 128
    11f6:	75 e2       	ldi	r23, 0x25	; 37
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 28 0a 	call	0x1450	; 0x1450 <USART_vidInit>
	
	/**************************************************************************************************/
	flag1=EEPROM_voidRead(1);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 7e 02 	call	0x4fc	; 0x4fc <EEPROM_voidRead>
    1208:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <flag1>
	if (flag1==0xff)
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	c1 f5       	brne	.+112    	; 0x1280 <main+0xde>
	{
		LCD_voidDisplayString4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Smart Home");
    1210:	0f 2e       	mov	r0, r31
    1212:	fc e7       	ldi	r31, 0x7C	; 124
    1214:	cf 2e       	mov	r12, r31
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	df 2e       	mov	r13, r31
    121a:	f0 2d       	mov	r31, r0
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	43 e0       	ldi	r20, 0x03	; 3
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
    1228:	2f ef       	ldi	r18, 0xFF	; 255
    122a:	89 e6       	ldi	r24, 0x69	; 105
    122c:	98 e1       	ldi	r25, 0x18	; 24
    122e:	21 50       	subi	r18, 0x01	; 1
    1230:	80 40       	sbci	r24, 0x00	; 0
    1232:	90 40       	sbci	r25, 0x00	; 0
    1234:	e1 f7       	brne	.-8      	; 0x122e <main+0x8c>
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <main+0x96>
    1238:	00 00       	nop
	     _delay_ms(1000);
		 LCD_vidMoveCursor4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE,1,1);
    123a:	aa 24       	eor	r10, r10
    123c:	a3 94       	inc	r10
    123e:	cc 24       	eor	r12, r12
    1240:	c3 94       	inc	r12
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	43 e0       	ldi	r20, 0x03	; 3
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vidMoveCursor4bit>
		 
		LCD_voidDisplayString4bit(GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Set password:");
    124e:	0f 2e       	mov	r0, r31
    1250:	f7 e8       	ldi	r31, 0x87	; 135
    1252:	cf 2e       	mov	r12, r31
    1254:	f1 e0       	ldi	r31, 0x01	; 1
    1256:	df 2e       	mov	r13, r31
    1258:	f0 2d       	mov	r31, r0
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	43 e0       	ldi	r20, 0x03	; 3
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
		LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
    1266:	0f 2e       	mov	r0, r31
    1268:	f0 ec       	ldi	r31, 0xC0	; 192
    126a:	cf 2e       	mov	r12, r31
    126c:	f0 2d       	mov	r31, r0
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	43 e0       	ldi	r20, 0x03	; 3
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
		set_password ();
    127a:	0e 94 35 08 	call	0x106a	; 0x106a <set_password>
    127e:	3e c0       	rjmp	.+124    	; 0x12fc <main+0x15a>
	}
		else
		{
				for (k=0; k<4; k++)
    1280:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <k>
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <main+0xfe>
				{
					password[k]=EEPROM_voidRead ((k + 1));
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <EEPROM_voidRead>
    1290:	c7 55       	subi	r28, 0x57	; 87
    1292:	de 4f       	sbci	r29, 0xFE	; 254
    1294:	88 83       	st	Y, r24
		LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
		set_password ();
	}
		else
		{
				for (k=0; k<4; k++)
    1296:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <k>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <k>
    12a0:	c0 91 a3 01 	lds	r28, 0x01A3	; 0x8001a3 <k>
    12a4:	c4 30       	cpi	r28, 0x04	; 4
    12a6:	78 f3       	brcs	.-34     	; 0x1286 <main+0xe4>
				{
					password[k]=EEPROM_voidRead ((k + 1));
				}
				LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Enter Pass :");
    12a8:	0f 2e       	mov	r0, r31
    12aa:	f5 e9       	ldi	r31, 0x95	; 149
    12ac:	cf 2e       	mov	r12, r31
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	df 2e       	mov	r13, r31
    12b2:	f0 2d       	mov	r31, r0
    12b4:	ee 24       	eor	r14, r14
    12b6:	e3 94       	inc	r14
    12b8:	02 e0       	ldi	r16, 0x02	; 2
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	43 e0       	ldi	r20, 0x03	; 3
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_voidDisplayString4bit>
				LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f0 ec       	ldi	r31, 0xC0	; 192
    12ca:	cf 2e       	mov	r12, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	43 e0       	ldi	r20, 0x03	; 3
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vidSendCmd4bit>
				Enter_password ();
    12da:	0e 94 b4 05 	call	0xb68	; 0xb68 <Enter_password>
				
				g=check_passsword();
    12de:	0e 94 15 07 	call	0xe2a	; 0xe2a <check_passsword>
    12e2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
				while (g==0)
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <main+0x152>
		         {
					Enter_password ();
    12e8:	0e 94 b4 05 	call	0xb68	; 0xb68 <Enter_password>
					g=check_passsword();
    12ec:	0e 94 15 07 	call	0xe2a	; 0xe2a <check_passsword>
    12f0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g>
				LCD_voidDisplayString4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, "Enter Pass :");
				LCD_vidSendCmd4bit (GPIOA, GPIOA, PIN3, GPIOA, PIN2, HIGH_NIBBLE, 0xC0);
				Enter_password ();
				
				g=check_passsword();
				while (g==0)
    12f4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <g>
    12f8:	88 23       	and	r24, r24
    12fa:	b1 f3       	breq	.-20     	; 0x12e8 <main+0x146>
    12fc:	ff cf       	rjmp	.-2      	; 0x12fc <main+0x15a>

000012fe <TMR0_voidInit>:
		TMR0_voidSetOCR0(Local_u8Data);
	#elif TMR0_COM_PCPWM == 0x30
		Local_u8Data = 255-((255 * copy_u8DutyCycle)/100);
		TMR0_voidSetOCR0(Local_u8Data);
	#endif
}
    12fe:	8f b7       	in	r24, 0x3f	; 63
    1300:	80 68       	ori	r24, 0x80	; 128
    1302:	8f bf       	out	0x3f, r24	; 63
    1304:	83 b7       	in	r24, 0x33	; 51
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	83 bf       	out	0x33, r24	; 51
    130a:	83 b7       	in	r24, 0x33	; 51
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	83 bf       	out	0x33, r24	; 51
    1310:	83 b7       	in	r24, 0x33	; 51
    1312:	8f 7c       	andi	r24, 0xCF	; 207
    1314:	83 bf       	out	0x33, r24	; 51
    1316:	83 b7       	in	r24, 0x33	; 51
    1318:	80 63       	ori	r24, 0x30	; 48
    131a:	83 bf       	out	0x33, r24	; 51
    131c:	83 b7       	in	r24, 0x33	; 51
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	83 bf       	out	0x33, r24	; 51
    1322:	89 b7       	in	r24, 0x39	; 57
    1324:	8e 7f       	andi	r24, 0xFE	; 254
    1326:	89 bf       	out	0x39, r24	; 57
    1328:	89 b7       	in	r24, 0x39	; 57
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	89 bf       	out	0x39, r24	; 57
    132e:	08 95       	ret

00001330 <TMR0_voidStart>:
    1330:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <flag>
    1334:	93 b7       	in	r25, 0x33	; 51
    1336:	98 7f       	andi	r25, 0xF8	; 248
    1338:	93 bf       	out	0x33, r25	; 51
    133a:	93 b7       	in	r25, 0x33	; 51
    133c:	89 2b       	or	r24, r25
    133e:	83 bf       	out	0x33, r24	; 51
    1340:	08 95       	ret

00001342 <TMR0_voidSetOCR0>:
    1342:	8c bf       	out	0x3c, r24	; 60
    1344:	08 95       	ret

00001346 <TMR0_GenerateFastPWM>:
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	1f 92       	push	r1
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	18 2f       	mov	r17, r24
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_vidSetPinMode>
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	91 2f       	mov	r25, r17
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	64 e6       	ldi	r22, 0x64	; 100
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    136c:	60 95       	com	r22
    136e:	69 83       	std	Y+1, r22	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	0e 94 a1 09 	call	0x1342	; 0x1342 <TMR0_voidSetOCR0>
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	08 95       	ret

00001380 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	5f 93       	push	r21
    1392:	6f 93       	push	r22
    1394:	7f 93       	push	r23
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	af 93       	push	r26
    139c:	bf 93       	push	r27
    139e:	ef 93       	push	r30
    13a0:	ff 93       	push	r31
	TOV_Counter++;
    13a2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <TOV_Counter>
    13a6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <TOV_Counter+0x1>
    13aa:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <TOV_Counter+0x2>
    13ae:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <TOV_Counter+0x3>
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	a1 1d       	adc	r26, r1
    13b6:	b1 1d       	adc	r27, r1
    13b8:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <TOV_Counter>
    13bc:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <TOV_Counter+0x1>
    13c0:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <TOV_Counter+0x2>
    13c4:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <TOV_Counter+0x3>
	if(flag !=0)
    13c8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <flag>
    13cc:	88 23       	and	r24, r24
    13ce:	29 f0       	breq	.+10     	; 0x13da <__vector_11+0x5a>
	{
		(*Global_CBTOV)();
    13d0:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <Global_CBTOV>
    13d4:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <Global_CBTOV+0x1>
    13d8:	09 95       	icall
	}
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
	(*Global_CBCTC)();
    141e:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <Global_CBCTC>
    1422:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <Global_CBCTC+0x1>
    1426:	09 95       	icall
	SET_BIT(TIFR,OCF0);
    1428:	88 b7       	in	r24, 0x38	; 56
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	88 bf       	out	0x38, r24	; 56
}
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <USART_vidInit>:
	CB_RX = copy_CB;
}

void USART_vidSetCBUDRE(void(*copy_CB)(void))
{
	CB_UDR = copy_CB;
    1450:	20 b5       	in	r18, 0x20	; 32
    1452:	2f 77       	andi	r18, 0x7F	; 127
    1454:	20 bd       	out	0x20, r18	; 32
    1456:	20 b5       	in	r18, 0x20	; 32
    1458:	2f 7b       	andi	r18, 0xBF	; 191
    145a:	20 bd       	out	0x20, r18	; 32
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	aa 1f       	adc	r26, r26
    1466:	bb 1f       	adc	r27, r27
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	aa 1f       	adc	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	9c 01       	movw	r18, r24
    1472:	ad 01       	movw	r20, r26
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	44 1f       	adc	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	44 1f       	adc	r20, r20
    1482:	55 1f       	adc	r21, r21
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	72 e1       	ldi	r23, 0x12	; 18
    1488:	8a e7       	ldi	r24, 0x7A	; 122
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__udivmodsi4>
    1490:	21 50       	subi	r18, 0x01	; 1
    1492:	31 09       	sbc	r19, r1
    1494:	80 b5       	in	r24, 0x20	; 32
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	80 bd       	out	0x20, r24	; 32
    149a:	80 b5       	in	r24, 0x20	; 32
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	80 bd       	out	0x20, r24	; 32
    14a0:	8a b1       	in	r24, 0x0a	; 10
    14a2:	8b 7f       	andi	r24, 0xFB	; 251
    14a4:	8a b9       	out	0x0a, r24	; 10
    14a6:	80 b5       	in	r24, 0x20	; 32
    14a8:	8f 7e       	andi	r24, 0xEF	; 239
    14aa:	80 bd       	out	0x20, r24	; 32
    14ac:	80 b5       	in	r24, 0x20	; 32
    14ae:	8f 7d       	andi	r24, 0xDF	; 223
    14b0:	80 bd       	out	0x20, r24	; 32
    14b2:	80 b5       	in	r24, 0x20	; 32
    14b4:	88 60       	ori	r24, 0x08	; 8
    14b6:	80 bd       	out	0x20, r24	; 32
    14b8:	8a b1       	in	r24, 0x0a	; 10
    14ba:	88 60       	ori	r24, 0x08	; 8
    14bc:	8a b9       	out	0x0a, r24	; 10
    14be:	8a b1       	in	r24, 0x0a	; 10
    14c0:	80 61       	ori	r24, 0x10	; 16
    14c2:	8a b9       	out	0x0a, r24	; 10
    14c4:	80 b5       	in	r24, 0x20	; 32
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	80 bd       	out	0x20, r24	; 32
    14ca:	30 bd       	out	0x20, r19	; 32
    14cc:	29 b9       	out	0x09, r18	; 9
    14ce:	08 95       	ret

000014d0 <USART_vidSendByte>:
    14d0:	5d 9b       	sbis	0x0b, 5	; 11
    14d2:	fe cf       	rjmp	.-4      	; 0x14d0 <USART_vidSendByte>
    14d4:	8c b9       	out	0x0c, r24	; 12
    14d6:	08 95       	ret

000014d8 <USART_vidSendString>:
}

void USART_vidSendString(u8 *copy_ptrString)
{
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ec 01       	movw	r28, r24
	while((*copy_ptrString) != '\0')
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <USART_vidSendString+0xe>
	{
		USART_vidSendByte(*copy_ptrString);
    14e0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <USART_vidSendByte>
		copy_ptrString++;
    14e4:	21 96       	adiw	r28, 0x01	; 1
	CB_UDR = copy_CB;
}

void USART_vidSendString(u8 *copy_ptrString)
{
	while((*copy_ptrString) != '\0')
    14e6:	88 81       	ld	r24, Y
    14e8:	81 11       	cpse	r24, r1
    14ea:	fa cf       	rjmp	.-12     	; 0x14e0 <USART_vidSendString+0x8>
	{
		USART_vidSendByte(*copy_ptrString);
		copy_ptrString++;
	}
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <__udivmodhi4>:
    14f2:	aa 1b       	sub	r26, r26
    14f4:	bb 1b       	sub	r27, r27
    14f6:	51 e1       	ldi	r21, 0x11	; 17
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <__udivmodhi4_ep>

000014fa <__udivmodhi4_loop>:
    14fa:	aa 1f       	adc	r26, r26
    14fc:	bb 1f       	adc	r27, r27
    14fe:	a6 17       	cp	r26, r22
    1500:	b7 07       	cpc	r27, r23
    1502:	10 f0       	brcs	.+4      	; 0x1508 <__udivmodhi4_ep>
    1504:	a6 1b       	sub	r26, r22
    1506:	b7 0b       	sbc	r27, r23

00001508 <__udivmodhi4_ep>:
    1508:	88 1f       	adc	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	5a 95       	dec	r21
    150e:	a9 f7       	brne	.-22     	; 0x14fa <__udivmodhi4_loop>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	08 95       	ret

0000151a <__divmodhi4>:
    151a:	97 fb       	bst	r25, 7
    151c:	07 2e       	mov	r0, r23
    151e:	16 f4       	brtc	.+4      	; 0x1524 <__divmodhi4+0xa>
    1520:	00 94       	com	r0
    1522:	07 d0       	rcall	.+14     	; 0x1532 <__divmodhi4_neg1>
    1524:	77 fd       	sbrc	r23, 7
    1526:	09 d0       	rcall	.+18     	; 0x153a <__divmodhi4_neg2>
    1528:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__udivmodhi4>
    152c:	07 fc       	sbrc	r0, 7
    152e:	05 d0       	rcall	.+10     	; 0x153a <__divmodhi4_neg2>
    1530:	3e f4       	brtc	.+14     	; 0x1540 <__divmodhi4_exit>

00001532 <__divmodhi4_neg1>:
    1532:	90 95       	com	r25
    1534:	81 95       	neg	r24
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	08 95       	ret

0000153a <__divmodhi4_neg2>:
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255

00001540 <__divmodhi4_exit>:
    1540:	08 95       	ret

00001542 <__udivmodsi4>:
    1542:	a1 e2       	ldi	r26, 0x21	; 33
    1544:	1a 2e       	mov	r1, r26
    1546:	aa 1b       	sub	r26, r26
    1548:	bb 1b       	sub	r27, r27
    154a:	fd 01       	movw	r30, r26
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <__udivmodsi4_ep>

0000154e <__udivmodsi4_loop>:
    154e:	aa 1f       	adc	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	ee 1f       	adc	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	a2 17       	cp	r26, r18
    1558:	b3 07       	cpc	r27, r19
    155a:	e4 07       	cpc	r30, r20
    155c:	f5 07       	cpc	r31, r21
    155e:	20 f0       	brcs	.+8      	; 0x1568 <__udivmodsi4_ep>
    1560:	a2 1b       	sub	r26, r18
    1562:	b3 0b       	sbc	r27, r19
    1564:	e4 0b       	sbc	r30, r20
    1566:	f5 0b       	sbc	r31, r21

00001568 <__udivmodsi4_ep>:
    1568:	66 1f       	adc	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	1a 94       	dec	r1
    1572:	69 f7       	brne	.-38     	; 0x154e <__udivmodsi4_loop>
    1574:	60 95       	com	r22
    1576:	70 95       	com	r23
    1578:	80 95       	com	r24
    157a:	90 95       	com	r25
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	bd 01       	movw	r22, r26
    1582:	cf 01       	movw	r24, r30
    1584:	08 95       	ret

00001586 <sprintf>:
    1586:	ae e0       	ldi	r26, 0x0E	; 14
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__prologue_saves__+0x1c>
    1592:	0d 89       	ldd	r16, Y+21	; 0x15
    1594:	1e 89       	ldd	r17, Y+22	; 0x16
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	8c 83       	std	Y+4, r24	; 0x04
    159a:	1a 83       	std	Y+2, r17	; 0x02
    159c:	09 83       	std	Y+1, r16	; 0x01
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	9f e7       	ldi	r25, 0x7F	; 127
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	ae 01       	movw	r20, r28
    15a8:	47 5e       	subi	r20, 0xE7	; 231
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	6f 89       	ldd	r22, Y+23	; 0x17
    15ae:	78 8d       	ldd	r23, Y+24	; 0x18
    15b0:	ce 01       	movw	r24, r28
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <vfprintf>
    15b8:	ef 81       	ldd	r30, Y+7	; 0x07
    15ba:	f8 85       	ldd	r31, Y+8	; 0x08
    15bc:	e0 0f       	add	r30, r16
    15be:	f1 1f       	adc	r31, r17
    15c0:	10 82       	st	Z, r1
    15c2:	2e 96       	adiw	r28, 0x0e	; 14
    15c4:	e4 e0       	ldi	r30, 0x04	; 4
    15c6:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__epilogue_restores__+0x1c>

000015ca <vfprintf>:
    15ca:	ab e0       	ldi	r26, 0x0B	; 11
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb ee       	ldi	r30, 0xEB	; 235
    15d0:	fa e0       	ldi	r31, 0x0A	; 10
    15d2:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__prologue_saves__>
    15d6:	6c 01       	movw	r12, r24
    15d8:	7b 01       	movw	r14, r22
    15da:	8a 01       	movw	r16, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	17 82       	std	Z+7, r1	; 0x07
    15e0:	16 82       	std	Z+6, r1	; 0x06
    15e2:	83 81       	ldd	r24, Z+3	; 0x03
    15e4:	81 ff       	sbrs	r24, 1
    15e6:	cc c1       	rjmp	.+920    	; 0x1980 <vfprintf+0x3b6>
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	3c 01       	movw	r6, r24
    15ee:	f6 01       	movw	r30, r12
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	f7 01       	movw	r30, r14
    15f4:	93 fd       	sbrc	r25, 3
    15f6:	85 91       	lpm	r24, Z+
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	81 91       	ld	r24, Z+
    15fc:	7f 01       	movw	r14, r30
    15fe:	88 23       	and	r24, r24
    1600:	09 f4       	brne	.+2      	; 0x1604 <vfprintf+0x3a>
    1602:	ba c1       	rjmp	.+884    	; 0x1978 <vfprintf+0x3ae>
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	39 f4       	brne	.+14     	; 0x1616 <vfprintf+0x4c>
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	7f 01       	movw	r14, r30
    1612:	85 32       	cpi	r24, 0x25	; 37
    1614:	29 f4       	brne	.+10     	; 0x1620 <vfprintf+0x56>
    1616:	b6 01       	movw	r22, r12
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    161e:	e7 cf       	rjmp	.-50     	; 0x15ee <vfprintf+0x24>
    1620:	91 2c       	mov	r9, r1
    1622:	21 2c       	mov	r2, r1
    1624:	31 2c       	mov	r3, r1
    1626:	ff e1       	ldi	r31, 0x1F	; 31
    1628:	f3 15       	cp	r31, r3
    162a:	d8 f0       	brcs	.+54     	; 0x1662 <vfprintf+0x98>
    162c:	8b 32       	cpi	r24, 0x2B	; 43
    162e:	79 f0       	breq	.+30     	; 0x164e <vfprintf+0x84>
    1630:	38 f4       	brcc	.+14     	; 0x1640 <vfprintf+0x76>
    1632:	80 32       	cpi	r24, 0x20	; 32
    1634:	79 f0       	breq	.+30     	; 0x1654 <vfprintf+0x8a>
    1636:	83 32       	cpi	r24, 0x23	; 35
    1638:	a1 f4       	brne	.+40     	; 0x1662 <vfprintf+0x98>
    163a:	23 2d       	mov	r18, r3
    163c:	20 61       	ori	r18, 0x10	; 16
    163e:	1d c0       	rjmp	.+58     	; 0x167a <vfprintf+0xb0>
    1640:	8d 32       	cpi	r24, 0x2D	; 45
    1642:	61 f0       	breq	.+24     	; 0x165c <vfprintf+0x92>
    1644:	80 33       	cpi	r24, 0x30	; 48
    1646:	69 f4       	brne	.+26     	; 0x1662 <vfprintf+0x98>
    1648:	23 2d       	mov	r18, r3
    164a:	21 60       	ori	r18, 0x01	; 1
    164c:	16 c0       	rjmp	.+44     	; 0x167a <vfprintf+0xb0>
    164e:	83 2d       	mov	r24, r3
    1650:	82 60       	ori	r24, 0x02	; 2
    1652:	38 2e       	mov	r3, r24
    1654:	e3 2d       	mov	r30, r3
    1656:	e4 60       	ori	r30, 0x04	; 4
    1658:	3e 2e       	mov	r3, r30
    165a:	2a c0       	rjmp	.+84     	; 0x16b0 <vfprintf+0xe6>
    165c:	f3 2d       	mov	r31, r3
    165e:	f8 60       	ori	r31, 0x08	; 8
    1660:	1d c0       	rjmp	.+58     	; 0x169c <vfprintf+0xd2>
    1662:	37 fc       	sbrc	r3, 7
    1664:	2d c0       	rjmp	.+90     	; 0x16c0 <vfprintf+0xf6>
    1666:	20 ed       	ldi	r18, 0xD0	; 208
    1668:	28 0f       	add	r18, r24
    166a:	2a 30       	cpi	r18, 0x0A	; 10
    166c:	40 f0       	brcs	.+16     	; 0x167e <vfprintf+0xb4>
    166e:	8e 32       	cpi	r24, 0x2E	; 46
    1670:	b9 f4       	brne	.+46     	; 0x16a0 <vfprintf+0xd6>
    1672:	36 fc       	sbrc	r3, 6
    1674:	81 c1       	rjmp	.+770    	; 0x1978 <vfprintf+0x3ae>
    1676:	23 2d       	mov	r18, r3
    1678:	20 64       	ori	r18, 0x40	; 64
    167a:	32 2e       	mov	r3, r18
    167c:	19 c0       	rjmp	.+50     	; 0x16b0 <vfprintf+0xe6>
    167e:	36 fe       	sbrs	r3, 6
    1680:	06 c0       	rjmp	.+12     	; 0x168e <vfprintf+0xc4>
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	98 9e       	mul	r9, r24
    1686:	20 0d       	add	r18, r0
    1688:	11 24       	eor	r1, r1
    168a:	92 2e       	mov	r9, r18
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <vfprintf+0xe6>
    168e:	ea e0       	ldi	r30, 0x0A	; 10
    1690:	2e 9e       	mul	r2, r30
    1692:	20 0d       	add	r18, r0
    1694:	11 24       	eor	r1, r1
    1696:	22 2e       	mov	r2, r18
    1698:	f3 2d       	mov	r31, r3
    169a:	f0 62       	ori	r31, 0x20	; 32
    169c:	3f 2e       	mov	r3, r31
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <vfprintf+0xe6>
    16a0:	8c 36       	cpi	r24, 0x6C	; 108
    16a2:	21 f4       	brne	.+8      	; 0x16ac <vfprintf+0xe2>
    16a4:	83 2d       	mov	r24, r3
    16a6:	80 68       	ori	r24, 0x80	; 128
    16a8:	38 2e       	mov	r3, r24
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0xe6>
    16ac:	88 36       	cpi	r24, 0x68	; 104
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <vfprintf+0xf6>
    16b0:	f7 01       	movw	r30, r14
    16b2:	93 fd       	sbrc	r25, 3
    16b4:	85 91       	lpm	r24, Z+
    16b6:	93 ff       	sbrs	r25, 3
    16b8:	81 91       	ld	r24, Z+
    16ba:	7f 01       	movw	r14, r30
    16bc:	81 11       	cpse	r24, r1
    16be:	b3 cf       	rjmp	.-154    	; 0x1626 <vfprintf+0x5c>
    16c0:	98 2f       	mov	r25, r24
    16c2:	9f 7d       	andi	r25, 0xDF	; 223
    16c4:	95 54       	subi	r25, 0x45	; 69
    16c6:	93 30       	cpi	r25, 0x03	; 3
    16c8:	28 f4       	brcc	.+10     	; 0x16d4 <vfprintf+0x10a>
    16ca:	0c 5f       	subi	r16, 0xFC	; 252
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	9f e3       	ldi	r25, 0x3F	; 63
    16d0:	99 83       	std	Y+1, r25	; 0x01
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <vfprintf+0x124>
    16d4:	83 36       	cpi	r24, 0x63	; 99
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <vfprintf+0x11a>
    16d8:	83 37       	cpi	r24, 0x73	; 115
    16da:	71 f0       	breq	.+28     	; 0x16f8 <vfprintf+0x12e>
    16dc:	83 35       	cpi	r24, 0x53	; 83
    16de:	09 f0       	breq	.+2      	; 0x16e2 <vfprintf+0x118>
    16e0:	59 c0       	rjmp	.+178    	; 0x1794 <vfprintf+0x1ca>
    16e2:	21 c0       	rjmp	.+66     	; 0x1726 <vfprintf+0x15c>
    16e4:	f8 01       	movw	r30, r16
    16e6:	80 81       	ld	r24, Z
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	0e 5f       	subi	r16, 0xFE	; 254
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	88 24       	eor	r8, r8
    16f0:	83 94       	inc	r8
    16f2:	91 2c       	mov	r9, r1
    16f4:	53 01       	movw	r10, r6
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <vfprintf+0x154>
    16f8:	28 01       	movw	r4, r16
    16fa:	f2 e0       	ldi	r31, 0x02	; 2
    16fc:	4f 0e       	add	r4, r31
    16fe:	51 1c       	adc	r5, r1
    1700:	f8 01       	movw	r30, r16
    1702:	a0 80       	ld	r10, Z
    1704:	b1 80       	ldd	r11, Z+1	; 0x01
    1706:	36 fe       	sbrs	r3, 6
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <vfprintf+0x146>
    170a:	69 2d       	mov	r22, r9
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x14a>
    1710:	6f ef       	ldi	r22, 0xFF	; 255
    1712:	7f ef       	ldi	r23, 0xFF	; 255
    1714:	c5 01       	movw	r24, r10
    1716:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <strnlen>
    171a:	4c 01       	movw	r8, r24
    171c:	82 01       	movw	r16, r4
    171e:	f3 2d       	mov	r31, r3
    1720:	ff 77       	andi	r31, 0x7F	; 127
    1722:	3f 2e       	mov	r3, r31
    1724:	16 c0       	rjmp	.+44     	; 0x1752 <vfprintf+0x188>
    1726:	28 01       	movw	r4, r16
    1728:	22 e0       	ldi	r18, 0x02	; 2
    172a:	42 0e       	add	r4, r18
    172c:	51 1c       	adc	r5, r1
    172e:	f8 01       	movw	r30, r16
    1730:	a0 80       	ld	r10, Z
    1732:	b1 80       	ldd	r11, Z+1	; 0x01
    1734:	36 fe       	sbrs	r3, 6
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x174>
    1738:	69 2d       	mov	r22, r9
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x178>
    173e:	6f ef       	ldi	r22, 0xFF	; 255
    1740:	7f ef       	ldi	r23, 0xFF	; 255
    1742:	c5 01       	movw	r24, r10
    1744:	0e 94 c6 0c 	call	0x198c	; 0x198c <strnlen_P>
    1748:	4c 01       	movw	r8, r24
    174a:	f3 2d       	mov	r31, r3
    174c:	f0 68       	ori	r31, 0x80	; 128
    174e:	3f 2e       	mov	r3, r31
    1750:	82 01       	movw	r16, r4
    1752:	33 fc       	sbrc	r3, 3
    1754:	1b c0       	rjmp	.+54     	; 0x178c <vfprintf+0x1c2>
    1756:	82 2d       	mov	r24, r2
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	88 16       	cp	r8, r24
    175c:	99 06       	cpc	r9, r25
    175e:	b0 f4       	brcc	.+44     	; 0x178c <vfprintf+0x1c2>
    1760:	b6 01       	movw	r22, r12
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    176a:	2a 94       	dec	r2
    176c:	f4 cf       	rjmp	.-24     	; 0x1756 <vfprintf+0x18c>
    176e:	f5 01       	movw	r30, r10
    1770:	37 fc       	sbrc	r3, 7
    1772:	85 91       	lpm	r24, Z+
    1774:	37 fe       	sbrs	r3, 7
    1776:	81 91       	ld	r24, Z+
    1778:	5f 01       	movw	r10, r30
    177a:	b6 01       	movw	r22, r12
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    1782:	21 10       	cpse	r2, r1
    1784:	2a 94       	dec	r2
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	82 1a       	sub	r8, r18
    178a:	91 08       	sbc	r9, r1
    178c:	81 14       	cp	r8, r1
    178e:	91 04       	cpc	r9, r1
    1790:	71 f7       	brne	.-36     	; 0x176e <vfprintf+0x1a4>
    1792:	e8 c0       	rjmp	.+464    	; 0x1964 <vfprintf+0x39a>
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	11 f0       	breq	.+4      	; 0x179c <vfprintf+0x1d2>
    1798:	89 36       	cpi	r24, 0x69	; 105
    179a:	41 f5       	brne	.+80     	; 0x17ec <vfprintf+0x222>
    179c:	f8 01       	movw	r30, r16
    179e:	37 fe       	sbrs	r3, 7
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x1e6>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0c 5f       	subi	r16, 0xFC	; 252
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x1f6>
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	07 2e       	mov	r0, r23
    17b6:	00 0c       	add	r0, r0
    17b8:	88 0b       	sbc	r24, r24
    17ba:	99 0b       	sbc	r25, r25
    17bc:	0e 5f       	subi	r16, 0xFE	; 254
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	f3 2d       	mov	r31, r3
    17c2:	ff 76       	andi	r31, 0x6F	; 111
    17c4:	3f 2e       	mov	r3, r31
    17c6:	97 ff       	sbrs	r25, 7
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x212>
    17ca:	90 95       	com	r25
    17cc:	80 95       	com	r24
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	f0 68       	ori	r31, 0x80	; 128
    17da:	3f 2e       	mov	r3, r31
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a3 01       	movw	r20, r6
    17e2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__ultoa_invert>
    17e6:	88 2e       	mov	r8, r24
    17e8:	86 18       	sub	r8, r6
    17ea:	45 c0       	rjmp	.+138    	; 0x1876 <vfprintf+0x2ac>
    17ec:	85 37       	cpi	r24, 0x75	; 117
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vfprintf+0x232>
    17f0:	23 2d       	mov	r18, r3
    17f2:	2f 7e       	andi	r18, 0xEF	; 239
    17f4:	b2 2e       	mov	r11, r18
    17f6:	2a e0       	ldi	r18, 0x0A	; 10
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	25 c0       	rjmp	.+74     	; 0x1846 <vfprintf+0x27c>
    17fc:	93 2d       	mov	r25, r3
    17fe:	99 7f       	andi	r25, 0xF9	; 249
    1800:	b9 2e       	mov	r11, r25
    1802:	8f 36       	cpi	r24, 0x6F	; 111
    1804:	c1 f0       	breq	.+48     	; 0x1836 <vfprintf+0x26c>
    1806:	18 f4       	brcc	.+6      	; 0x180e <vfprintf+0x244>
    1808:	88 35       	cpi	r24, 0x58	; 88
    180a:	79 f0       	breq	.+30     	; 0x182a <vfprintf+0x260>
    180c:	b5 c0       	rjmp	.+362    	; 0x1978 <vfprintf+0x3ae>
    180e:	80 37       	cpi	r24, 0x70	; 112
    1810:	19 f0       	breq	.+6      	; 0x1818 <vfprintf+0x24e>
    1812:	88 37       	cpi	r24, 0x78	; 120
    1814:	21 f0       	breq	.+8      	; 0x181e <vfprintf+0x254>
    1816:	b0 c0       	rjmp	.+352    	; 0x1978 <vfprintf+0x3ae>
    1818:	e9 2f       	mov	r30, r25
    181a:	e0 61       	ori	r30, 0x10	; 16
    181c:	be 2e       	mov	r11, r30
    181e:	b4 fe       	sbrs	r11, 4
    1820:	0d c0       	rjmp	.+26     	; 0x183c <vfprintf+0x272>
    1822:	fb 2d       	mov	r31, r11
    1824:	f4 60       	ori	r31, 0x04	; 4
    1826:	bf 2e       	mov	r11, r31
    1828:	09 c0       	rjmp	.+18     	; 0x183c <vfprintf+0x272>
    182a:	34 fe       	sbrs	r3, 4
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <vfprintf+0x278>
    182e:	29 2f       	mov	r18, r25
    1830:	26 60       	ori	r18, 0x06	; 6
    1832:	b2 2e       	mov	r11, r18
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <vfprintf+0x278>
    1836:	28 e0       	ldi	r18, 0x08	; 8
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <vfprintf+0x27c>
    183c:	20 e1       	ldi	r18, 0x10	; 16
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x27c>
    1842:	20 e1       	ldi	r18, 0x10	; 16
    1844:	32 e0       	ldi	r19, 0x02	; 2
    1846:	f8 01       	movw	r30, r16
    1848:	b7 fe       	sbrs	r11, 7
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfprintf+0x290>
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0c 5f       	subi	r16, 0xFC	; 252
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x29c>
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 5f       	subi	r16, 0xFE	; 254
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	a3 01       	movw	r20, r6
    1868:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__ultoa_invert>
    186c:	88 2e       	mov	r8, r24
    186e:	86 18       	sub	r8, r6
    1870:	fb 2d       	mov	r31, r11
    1872:	ff 77       	andi	r31, 0x7F	; 127
    1874:	3f 2e       	mov	r3, r31
    1876:	36 fe       	sbrs	r3, 6
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <vfprintf+0x2ca>
    187a:	23 2d       	mov	r18, r3
    187c:	2e 7f       	andi	r18, 0xFE	; 254
    187e:	a2 2e       	mov	r10, r18
    1880:	89 14       	cp	r8, r9
    1882:	58 f4       	brcc	.+22     	; 0x189a <vfprintf+0x2d0>
    1884:	34 fe       	sbrs	r3, 4
    1886:	0b c0       	rjmp	.+22     	; 0x189e <vfprintf+0x2d4>
    1888:	32 fc       	sbrc	r3, 2
    188a:	09 c0       	rjmp	.+18     	; 0x189e <vfprintf+0x2d4>
    188c:	83 2d       	mov	r24, r3
    188e:	8e 7e       	andi	r24, 0xEE	; 238
    1890:	a8 2e       	mov	r10, r24
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x2d4>
    1894:	b8 2c       	mov	r11, r8
    1896:	a3 2c       	mov	r10, r3
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x2d6>
    189a:	b8 2c       	mov	r11, r8
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x2d6>
    189e:	b9 2c       	mov	r11, r9
    18a0:	a4 fe       	sbrs	r10, 4
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <vfprintf+0x2f8>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e8 0d       	add	r30, r8
    18a8:	f1 1d       	adc	r31, r1
    18aa:	80 81       	ld	r24, Z
    18ac:	80 33       	cpi	r24, 0x30	; 48
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <vfprintf+0x2ee>
    18b0:	9a 2d       	mov	r25, r10
    18b2:	99 7e       	andi	r25, 0xE9	; 233
    18b4:	a9 2e       	mov	r10, r25
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x300>
    18b8:	a2 fe       	sbrs	r10, 2
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x2fe>
    18bc:	b3 94       	inc	r11
    18be:	b3 94       	inc	r11
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <vfprintf+0x300>
    18c2:	8a 2d       	mov	r24, r10
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x300>
    18c8:	b3 94       	inc	r11
    18ca:	a3 fc       	sbrc	r10, 3
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <vfprintf+0x326>
    18ce:	a0 fe       	sbrs	r10, 0
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x314>
    18d2:	b2 14       	cp	r11, r2
    18d4:	88 f4       	brcc	.+34     	; 0x18f8 <vfprintf+0x32e>
    18d6:	28 0c       	add	r2, r8
    18d8:	92 2c       	mov	r9, r2
    18da:	9b 18       	sub	r9, r11
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <vfprintf+0x330>
    18de:	b2 14       	cp	r11, r2
    18e0:	60 f4       	brcc	.+24     	; 0x18fa <vfprintf+0x330>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    18ec:	b3 94       	inc	r11
    18ee:	f7 cf       	rjmp	.-18     	; 0x18de <vfprintf+0x314>
    18f0:	b2 14       	cp	r11, r2
    18f2:	18 f4       	brcc	.+6      	; 0x18fa <vfprintf+0x330>
    18f4:	2b 18       	sub	r2, r11
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x332>
    18f8:	98 2c       	mov	r9, r8
    18fa:	21 2c       	mov	r2, r1
    18fc:	a4 fe       	sbrs	r10, 4
    18fe:	10 c0       	rjmp	.+32     	; 0x1920 <vfprintf+0x356>
    1900:	b6 01       	movw	r22, r12
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    190a:	a2 fe       	sbrs	r10, 2
    190c:	17 c0       	rjmp	.+46     	; 0x193c <vfprintf+0x372>
    190e:	a1 fc       	sbrc	r10, 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x34e>
    1912:	88 e7       	ldi	r24, 0x78	; 120
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x352>
    1918:	88 e5       	ldi	r24, 0x58	; 88
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b6 01       	movw	r22, r12
    191e:	0c c0       	rjmp	.+24     	; 0x1938 <vfprintf+0x36e>
    1920:	8a 2d       	mov	r24, r10
    1922:	86 78       	andi	r24, 0x86	; 134
    1924:	59 f0       	breq	.+22     	; 0x193c <vfprintf+0x372>
    1926:	a1 fe       	sbrs	r10, 1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x364>
    192a:	8b e2       	ldi	r24, 0x2B	; 43
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x366>
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	a7 fc       	sbrc	r10, 7
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    193c:	89 14       	cp	r8, r9
    193e:	38 f4       	brcc	.+14     	; 0x194e <vfprintf+0x384>
    1940:	b6 01       	movw	r22, r12
    1942:	80 e3       	ldi	r24, 0x30	; 48
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    194a:	9a 94       	dec	r9
    194c:	f7 cf       	rjmp	.-18     	; 0x193c <vfprintf+0x372>
    194e:	8a 94       	dec	r8
    1950:	f3 01       	movw	r30, r6
    1952:	e8 0d       	add	r30, r8
    1954:	f1 1d       	adc	r31, r1
    1956:	80 81       	ld	r24, Z
    1958:	b6 01       	movw	r22, r12
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    1960:	81 10       	cpse	r8, r1
    1962:	f5 cf       	rjmp	.-22     	; 0x194e <vfprintf+0x384>
    1964:	22 20       	and	r2, r2
    1966:	09 f4       	brne	.+2      	; 0x196a <vfprintf+0x3a0>
    1968:	42 ce       	rjmp	.-892    	; 0x15ee <vfprintf+0x24>
    196a:	b6 01       	movw	r22, r12
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <fputc>
    1974:	2a 94       	dec	r2
    1976:	f6 cf       	rjmp	.-20     	; 0x1964 <vfprintf+0x39a>
    1978:	f6 01       	movw	r30, r12
    197a:	86 81       	ldd	r24, Z+6	; 0x06
    197c:	97 81       	ldd	r25, Z+7	; 0x07
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0x3ba>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	2b 96       	adiw	r28, 0x0b	; 11
    1986:	e2 e1       	ldi	r30, 0x12	; 18
    1988:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__epilogue_restores__>

0000198c <strnlen_P>:
    198c:	fc 01       	movw	r30, r24
    198e:	05 90       	lpm	r0, Z+
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	70 40       	sbci	r23, 0x00	; 0
    1994:	01 10       	cpse	r0, r1
    1996:	d8 f7       	brcc	.-10     	; 0x198e <strnlen_P+0x2>
    1998:	80 95       	com	r24
    199a:	90 95       	com	r25
    199c:	8e 0f       	add	r24, r30
    199e:	9f 1f       	adc	r25, r31
    19a0:	08 95       	ret

000019a2 <strnlen>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	61 50       	subi	r22, 0x01	; 1
    19a6:	70 40       	sbci	r23, 0x00	; 0
    19a8:	01 90       	ld	r0, Z+
    19aa:	01 10       	cpse	r0, r1
    19ac:	d8 f7       	brcc	.-10     	; 0x19a4 <strnlen+0x2>
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	8e 0f       	add	r24, r30
    19b4:	9f 1f       	adc	r25, r31
    19b6:	08 95       	ret

000019b8 <fputc>:
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	fb 01       	movw	r30, r22
    19c2:	23 81       	ldd	r18, Z+3	; 0x03
    19c4:	21 fd       	sbrc	r18, 1
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <fputc+0x16>
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	9f ef       	ldi	r25, 0xFF	; 255
    19cc:	2c c0       	rjmp	.+88     	; 0x1a26 <fputc+0x6e>
    19ce:	22 ff       	sbrs	r18, 2
    19d0:	16 c0       	rjmp	.+44     	; 0x19fe <fputc+0x46>
    19d2:	46 81       	ldd	r20, Z+6	; 0x06
    19d4:	57 81       	ldd	r21, Z+7	; 0x07
    19d6:	24 81       	ldd	r18, Z+4	; 0x04
    19d8:	35 81       	ldd	r19, Z+5	; 0x05
    19da:	42 17       	cp	r20, r18
    19dc:	53 07       	cpc	r21, r19
    19de:	44 f4       	brge	.+16     	; 0x19f0 <fputc+0x38>
    19e0:	a0 81       	ld	r26, Z
    19e2:	b1 81       	ldd	r27, Z+1	; 0x01
    19e4:	9d 01       	movw	r18, r26
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	31 83       	std	Z+1, r19	; 0x01
    19ec:	20 83       	st	Z, r18
    19ee:	8c 93       	st	X, r24
    19f0:	26 81       	ldd	r18, Z+6	; 0x06
    19f2:	37 81       	ldd	r19, Z+7	; 0x07
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	37 83       	std	Z+7, r19	; 0x07
    19fa:	26 83       	std	Z+6, r18	; 0x06
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <fputc+0x6e>
    19fe:	8b 01       	movw	r16, r22
    1a00:	ec 01       	movw	r28, r24
    1a02:	fb 01       	movw	r30, r22
    1a04:	00 84       	ldd	r0, Z+8	; 0x08
    1a06:	f1 85       	ldd	r31, Z+9	; 0x09
    1a08:	e0 2d       	mov	r30, r0
    1a0a:	09 95       	icall
    1a0c:	89 2b       	or	r24, r25
    1a0e:	e1 f6       	brne	.-72     	; 0x19c8 <fputc+0x10>
    1a10:	d8 01       	movw	r26, r16
    1a12:	16 96       	adiw	r26, 0x06	; 6
    1a14:	8d 91       	ld	r24, X+
    1a16:	9c 91       	ld	r25, X
    1a18:	17 97       	sbiw	r26, 0x07	; 7
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	17 96       	adiw	r26, 0x07	; 7
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
    1a22:	16 97       	sbiw	r26, 0x06	; 6
    1a24:	ce 01       	movw	r24, r28
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <__ultoa_invert>:
    1a30:	fa 01       	movw	r30, r20
    1a32:	aa 27       	eor	r26, r26
    1a34:	28 30       	cpi	r18, 0x08	; 8
    1a36:	51 f1       	breq	.+84     	; 0x1a8c <__ultoa_invert+0x5c>
    1a38:	20 31       	cpi	r18, 0x10	; 16
    1a3a:	81 f1       	breq	.+96     	; 0x1a9c <__ultoa_invert+0x6c>
    1a3c:	e8 94       	clt
    1a3e:	6f 93       	push	r22
    1a40:	6e 7f       	andi	r22, 0xFE	; 254
    1a42:	6e 5f       	subi	r22, 0xFE	; 254
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	af 4f       	sbci	r26, 0xFF	; 255
    1a4c:	b1 e0       	ldi	r27, 0x01	; 1
    1a4e:	3e d0       	rcall	.+124    	; 0x1acc <__ultoa_invert+0x9c>
    1a50:	b4 e0       	ldi	r27, 0x04	; 4
    1a52:	3c d0       	rcall	.+120    	; 0x1acc <__ultoa_invert+0x9c>
    1a54:	67 0f       	add	r22, r23
    1a56:	78 1f       	adc	r23, r24
    1a58:	89 1f       	adc	r24, r25
    1a5a:	9a 1f       	adc	r25, r26
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	68 0f       	add	r22, r24
    1a60:	79 1f       	adc	r23, r25
    1a62:	8a 1f       	adc	r24, r26
    1a64:	91 1d       	adc	r25, r1
    1a66:	a1 1d       	adc	r26, r1
    1a68:	6a 0f       	add	r22, r26
    1a6a:	71 1d       	adc	r23, r1
    1a6c:	81 1d       	adc	r24, r1
    1a6e:	91 1d       	adc	r25, r1
    1a70:	a1 1d       	adc	r26, r1
    1a72:	20 d0       	rcall	.+64     	; 0x1ab4 <__ultoa_invert+0x84>
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <__ultoa_invert+0x48>
    1a76:	68 94       	set
    1a78:	3f 91       	pop	r19
    1a7a:	2a e0       	ldi	r18, 0x0A	; 10
    1a7c:	26 9f       	mul	r18, r22
    1a7e:	11 24       	eor	r1, r1
    1a80:	30 19       	sub	r19, r0
    1a82:	30 5d       	subi	r19, 0xD0	; 208
    1a84:	31 93       	st	Z+, r19
    1a86:	de f6       	brtc	.-74     	; 0x1a3e <__ultoa_invert+0xe>
    1a88:	cf 01       	movw	r24, r30
    1a8a:	08 95       	ret
    1a8c:	46 2f       	mov	r20, r22
    1a8e:	47 70       	andi	r20, 0x07	; 7
    1a90:	40 5d       	subi	r20, 0xD0	; 208
    1a92:	41 93       	st	Z+, r20
    1a94:	b3 e0       	ldi	r27, 0x03	; 3
    1a96:	0f d0       	rcall	.+30     	; 0x1ab6 <__ultoa_invert+0x86>
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__ultoa_invert+0x5c>
    1a9a:	f6 cf       	rjmp	.-20     	; 0x1a88 <__ultoa_invert+0x58>
    1a9c:	46 2f       	mov	r20, r22
    1a9e:	4f 70       	andi	r20, 0x0F	; 15
    1aa0:	40 5d       	subi	r20, 0xD0	; 208
    1aa2:	4a 33       	cpi	r20, 0x3A	; 58
    1aa4:	18 f0       	brcs	.+6      	; 0x1aac <__ultoa_invert+0x7c>
    1aa6:	49 5d       	subi	r20, 0xD9	; 217
    1aa8:	31 fd       	sbrc	r19, 1
    1aaa:	40 52       	subi	r20, 0x20	; 32
    1aac:	41 93       	st	Z+, r20
    1aae:	02 d0       	rcall	.+4      	; 0x1ab4 <__ultoa_invert+0x84>
    1ab0:	a9 f7       	brne	.-22     	; 0x1a9c <__ultoa_invert+0x6c>
    1ab2:	ea cf       	rjmp	.-44     	; 0x1a88 <__ultoa_invert+0x58>
    1ab4:	b4 e0       	ldi	r27, 0x04	; 4
    1ab6:	a6 95       	lsr	r26
    1ab8:	97 95       	ror	r25
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	ba 95       	dec	r27
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__ultoa_invert+0x86>
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	61 05       	cpc	r22, r1
    1ac8:	71 05       	cpc	r23, r1
    1aca:	08 95       	ret
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	0a 2e       	mov	r0, r26
    1ad2:	06 94       	lsr	r0
    1ad4:	57 95       	ror	r21
    1ad6:	47 95       	ror	r20
    1ad8:	37 95       	ror	r19
    1ada:	27 95       	ror	r18
    1adc:	ba 95       	dec	r27
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__ultoa_invert+0xa2>
    1ae0:	62 0f       	add	r22, r18
    1ae2:	73 1f       	adc	r23, r19
    1ae4:	84 1f       	adc	r24, r20
    1ae6:	95 1f       	adc	r25, r21
    1ae8:	a0 1d       	adc	r26, r0
    1aea:	08 95       	ret

00001aec <__prologue_saves__>:
    1aec:	2f 92       	push	r2
    1aee:	3f 92       	push	r3
    1af0:	4f 92       	push	r4
    1af2:	5f 92       	push	r5
    1af4:	6f 92       	push	r6
    1af6:	7f 92       	push	r7
    1af8:	8f 92       	push	r8
    1afa:	9f 92       	push	r9
    1afc:	af 92       	push	r10
    1afe:	bf 92       	push	r11
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	ca 1b       	sub	r28, r26
    1b16:	db 0b       	sbc	r29, r27
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	09 94       	ijmp

00001b24 <__epilogue_restores__>:
    1b24:	2a 88       	ldd	r2, Y+18	; 0x12
    1b26:	39 88       	ldd	r3, Y+17	; 0x11
    1b28:	48 88       	ldd	r4, Y+16	; 0x10
    1b2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b30:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b32:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b34:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b36:	b9 84       	ldd	r11, Y+9	; 0x09
    1b38:	c8 84       	ldd	r12, Y+8	; 0x08
    1b3a:	df 80       	ldd	r13, Y+7	; 0x07
    1b3c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b40:	0c 81       	ldd	r16, Y+4	; 0x04
    1b42:	1b 81       	ldd	r17, Y+3	; 0x03
    1b44:	aa 81       	ldd	r26, Y+2	; 0x02
    1b46:	b9 81       	ldd	r27, Y+1	; 0x01
    1b48:	ce 0f       	add	r28, r30
    1b4a:	d1 1d       	adc	r29, r1
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	ed 01       	movw	r28, r26
    1b58:	08 95       	ret

00001b5a <_exit>:
    1b5a:	f8 94       	cli

00001b5c <__stop_program>:
    1b5c:	ff cf       	rjmp	.-2      	; 0x1b5c <__stop_program>
